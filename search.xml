<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>happynewyear</title>
    <url>/2022/12/31/happynewyear/</url>
    <content><![CDATA[<p>苏轼有句话：“犯其至难而图其至远”，意思是说“向最难之处攻坚，追求最远大的目标”。路虽远，行则将至；事虽难，做则必成。只要有愚公移山的志气、滴水穿石的毅力，脚踏实地，埋头苦干，积跬步以至千里，就一定能够把宏伟目标变为美好现实。<br>新年的钟声即将敲响，让我们怀着对未来的美好向往，共同迎接2023年的第一缕阳光。<br>祝愿祖国繁荣昌盛、国泰民安！祝愿世界和平美好、幸福安宁！祝愿大家新年快乐、皆得所愿！ </p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/12/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>newpapaername</title>
    <url>/2022/12/31/newpapaername/</url>
    <content><![CDATA[<h1 id="test-hexo"><a href="#test-hexo" class="headerlink" title="test hexo"></a>test hexo</h1><pre><code>fum main()&#123;
    print(&quot;hello hexo&quot;)
&#125;
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>golang学习-即时通讯系统demo</title>
    <url>/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/</url>
    <content><![CDATA[<h1 id="简易的即时通讯系统的模拟demo"><a href="#简易的即时通讯系统的模拟demo" class="headerlink" title="简易的即时通讯系统的模拟demo"></a>简易的即时通讯系统的模拟demo</h1><p>基本项目结构如下<br><img src="/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/tree.png"><br>项目地址： <a href="https://github.com/Vector-DY/Instant-Messaging-demo">https://github.com/Vector-DY/Instant-Messaging-demo</a></p>
<span id="more"></span>
<h2 id="server构建"><a href="#server构建" class="headerlink" title="server构建"></a>server构建</h2><p>定义基本server类型及服务器接口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">	Ip   <span class="type">string</span></span><br><span class="line">	Port <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(ip <span class="type">string</span>, port <span class="type">int</span>)</span></span> *Server &#123;</span><br><span class="line">	server := &amp;Server&#123;</span><br><span class="line">		Ip:        ip,</span><br><span class="line">		Port:      port,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> server</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Start() &#123;</span><br><span class="line">	<span class="comment">//socket listen</span></span><br><span class="line">	listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="string">&quot;%s:%d&quot;</span>, s.Ip, s.Port))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;net.Listen err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//close listen socket</span></span><br><span class="line">	<span class="keyword">defer</span> listener.Close(）</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="comment">//accept</span></span><br><span class="line">		conn, err := listener.Accept()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;listener accept err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">///do handler</span></span><br><span class="line">		<span class="keyword">go</span> s.Handler(conn)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h2><h3 id="用户结构构建"><a href="#用户结构构建" class="headerlink" title="用户结构构建"></a>用户结构构建</h3><p>用户板块结构如下图所示<br>使用Map记录在线用户信息，用户上线后向服务器发出请求，服务器为每一个用户分配单独的channel传递消息<br><img src="/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/user.png"><br>用户对象及方法定义如下：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="keyword">User</span> <span class="title">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">	Addr <span class="keyword">string</span></span><br><span class="line">	C    chan <span class="keyword">string</span>  </span><br><span class="line">	conn net.Conn //用户属于哪一个连接</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewUser(conn net.Conn) *<span class="keyword">User</span> <span class="title">&#123;</span></span><br><span class="line"><span class="title">	userAddr</span> := conn.RemoteAddr().<span class="keyword">String</span>()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">user</span> <span class="title">:= &amp;User</span>&#123;</span><br><span class="line">		Name: userAddr,</span><br><span class="line">		Addr: userAddr,</span><br><span class="line">		C:    make(chan <span class="keyword">string</span>),</span><br><span class="line">		conn: conn,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	//启动监听当前<span class="keyword">user</span> <span class="title">channel</span>消息的goroutine</span><br><span class="line">	go user.ListenMessage()</span><br><span class="line"></span><br><span class="line">	return <span class="keyword">user</span></span><br><span class="line"><span class="title">&#125;</span></span><br></pre></td></tr></table></figure>
<p>服务器端需要增添存储用户数据的数据结构及处理用户业务的方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">	Ip   <span class="type">string</span></span><br><span class="line">	Port <span class="type">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//在线用户列表</span></span><br><span class="line">	OnlineMap <span class="keyword">map</span>[<span class="type">string</span>]*User</span><br><span class="line">	mapLock   sync.RWMutex</span><br><span class="line"></span><br><span class="line">	<span class="comment">//消息广播的channel</span></span><br><span class="line">	Message <span class="keyword">chan</span> <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Handler(conn net.Conn) &#123;&#125;</span><br><span class="line"><span class="comment">//广播消息的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> BroadCast(user *User, msg <span class="type">string</span>) &#123;</span><br><span class="line">	sendMsg := <span class="string">&quot;[&quot;</span> + user.Addr + <span class="string">&quot;]&quot;</span> + user.Name + <span class="string">&quot;:&quot;</span> + msg</span><br><span class="line">	s.Message &lt;- sendMsg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听Message广播消息channel的goroutine,一旦有消息就发送给全部的在线User</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> ListenMessager() &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		msg := &lt;-s.Message</span><br><span class="line"></span><br><span class="line">		<span class="comment">//将msg发送给全部的在线User</span></span><br><span class="line">		s.mapLock.Lock()</span><br><span class="line">		<span class="keyword">for</span> _, cli := <span class="keyword">range</span> s.OnlineMap &#123;</span><br><span class="line">			cli.C &lt;- msg</span><br><span class="line">		&#125;</span><br><span class="line">		s.mapLock.Unlock()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在服务器监听程序中，可以单独开辟一个goroutine监听Message广播消息</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>启动监听Message的goroutine</span><br><span class="line">	go s.ListenMessager()</span><br></pre></td></tr></table></figure>
<h3 id="用户业务层封装"><a href="#用户业务层封装" class="headerlink" title="用户业务层封装"></a>用户业务层封装</h3><p>一些消息方法我们之前运行在了server当中,所以需要将在server中处理的用户业务封装入用户模块,降低程序的耦合性。<br>在用户对象中加入server属性,表示所关联的服务器,处理用户在服务端的业务。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">	Name string</span><br><span class="line">	Addr string</span><br><span class="line">	C    chan string</span><br><span class="line">	conn net<span class="selector-class">.Conn</span></span><br><span class="line"></span><br><span class="line">	server *Server</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户的上线业务</span></span><br><span class="line">func (u *User) <span class="built_in">Online</span>() &#123;</span><br><span class="line">	<span class="comment">//用户上线,将用户加入到OnlineMap中</span></span><br><span class="line">	u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Lock</span>()</span><br><span class="line">	u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span><span class="selector-attr">[u.Name]</span> = u</span><br><span class="line">	u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Unlock</span>()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//广播当前用户上线信息</span></span><br><span class="line">	u<span class="selector-class">.server</span><span class="selector-class">.BroadCast</span>(u, <span class="string">&quot;已上线&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用户的下线业务</span></span><br><span class="line">func (u *User) <span class="built_in">Offline</span>() &#123;</span><br><span class="line">	<span class="comment">//用户下线,将用户从OnlineMap中删除</span></span><br><span class="line">	u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Lock</span>()</span><br><span class="line">	<span class="built_in">delete</span>(u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span>, u.Name)</span><br><span class="line">	u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Unlock</span>()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//广播当前用户上线信息</span></span><br><span class="line">	u<span class="selector-class">.server</span><span class="selector-class">.BroadCast</span>(u, <span class="string">&quot;已下线&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户的消息业务</span></span><br><span class="line">func (u *User) <span class="built_in">DoMessage</span>(msg string) &#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="用户功能扩展"><a href="#用户功能扩展" class="headerlink" title="用户功能扩展"></a>用户功能扩展</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给当前User对应的客户端发送消息</span></span><br><span class="line"><span class="comment">// 通过指令处理用户请求</span></span><br><span class="line">func (u *User) <span class="constructor">SendMsg(<span class="params">msg</span> <span class="params">string</span>)</span> &#123;</span><br><span class="line">	u.conn.<span class="constructor">Write([]<span class="params">byte</span>(<span class="params">msg</span>)</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在线用户查询功能。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> msg == <span class="string">&quot;who&quot;</span> &#123;</span><br><span class="line">	<span class="comment">//查询当前在线用户</span></span><br><span class="line">	u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Lock</span>()</span><br><span class="line">	<span class="keyword">for</span> _, user := range u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span> &#123;</span><br><span class="line">		onlineMsg := <span class="string">&quot;[&quot;</span> + user<span class="selector-class">.Addr</span> + <span class="string">&quot;]&quot;</span> + user<span class="selector-class">.Name</span> + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;在线...\n&quot;</span></span><br><span class="line">		u<span class="selector-class">.SendMsg</span>(onlineMsg)</span><br><span class="line">	&#125;</span><br><span class="line">	u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Unlock</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改名功能</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(msg) &gt; <span class="number">7</span> &amp;&amp; msg<span class="selector-attr">[:7]</span> == <span class="string">&quot;rename|&quot;</span> &#123;</span><br><span class="line">	<span class="comment">//消息格式：rename|XX</span></span><br><span class="line">	newName := strings<span class="selector-class">.Split</span>(msg, <span class="string">&quot;|&quot;</span>)<span class="selector-attr">[1]</span></span><br><span class="line">	<span class="comment">//判断name是否存在</span></span><br><span class="line">	_, ok := u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span><span class="selector-attr">[newName]</span></span><br><span class="line">	<span class="keyword">if</span> ok &#123;</span><br><span class="line">		u<span class="selector-class">.SendMsg</span>(<span class="string">&quot;当前用户名被使用\n&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Lock</span>()</span><br><span class="line">		<span class="built_in">delete</span>(u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span>, u.Name)</span><br><span class="line">		u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span><span class="selector-attr">[newName]</span> = u</span><br><span class="line">		u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Unlock</span>()</span><br><span class="line"></span><br><span class="line">		u<span class="selector-class">.Name</span> = newName</span><br><span class="line">		u<span class="selector-class">.SendMsg</span>(<span class="string">&quot;您已更新用户名&quot;</span> + u<span class="selector-class">.Name</span> + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>超时离线功能<br>在服务器的阻塞执行进程中判断用户是否在线</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//监听用户是否活跃的channel</span></span><br><span class="line">isLive := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> &lt;-isLive:</span><br><span class="line">		<span class="comment">//当前用户是活跃的,应该重置定时器</span></span><br><span class="line">		<span class="comment">//不做任何事情,激活select,更新下边定时器</span></span><br><span class="line">	<span class="keyword">case</span> &lt;-time.After((time.Second * <span class="number">120</span>)):</span><br><span class="line">		<span class="comment">//已经超时</span></span><br><span class="line">		<span class="comment">//将当前Use强制关闭</span></span><br><span class="line">		user.SendMsg(<span class="string">&quot;登录已超时&quot;</span>)</span><br><span class="line">		<span class="comment">//注销资源</span></span><br><span class="line">		<span class="built_in">close</span>(user.C)</span><br><span class="line"></span><br><span class="line">		<span class="comment">//关闭连接</span></span><br><span class="line">		conn.Close()</span><br></pre></td></tr></table></figure>
<p>私聊功能<br>获取对方的用户对象信息并发送信息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(msg) &gt; <span class="number">4</span> &amp;&amp; msg[:<span class="number">3</span>] == <span class="string">&quot;to|&quot;</span> &#123;</span><br><span class="line">	<span class="comment">//消息格式 to|XX|msg</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//1 获取对方用户名</span></span><br><span class="line">	remoteName := strings.Split(msg, <span class="string">&quot;|&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">if</span> remoteName == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		u.SendMsg(<span class="string">&quot;usage : to|XX|msg \n&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2 根据用户名得到User对象</span></span><br><span class="line">	remoteUser, ok := u.server.OnlineMap[remoteName]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		u.SendMsg(<span class="string">&quot;该用户名不存在\n&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//3 获取消息内容,通过对方的User对象将消息内容发送给过去</span></span><br><span class="line">	content := strings.Split(msg, <span class="string">&quot;|&quot;</span>)[<span class="number">2</span>]</span><br><span class="line">	<span class="keyword">if</span> content == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		u.SendMsg(<span class="string">&quot;无内容，请重发\n&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	remoteUser.SendMsg(u.Name + <span class="string">&quot;对你说：&quot;</span> + content + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h2><p>处理用户输入,与服务端交互。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">	ServerIp   <span class="type">string</span></span><br><span class="line">	ServerPort <span class="type">int</span></span><br><span class="line">	Name       <span class="type">string</span></span><br><span class="line">	conn       net.Conn</span><br><span class="line">	flag       <span class="type">int</span> <span class="comment">//当前客户端模式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	flag.StringVar(&amp;serverIp, <span class="string">&quot;ip&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;服务器IP地址(默认为127.0.0.1)&quot;</span>)</span><br><span class="line">	flag.IntVar(&amp;serverPort, <span class="string">&quot;port&quot;</span>, <span class="number">8888</span>, <span class="string">&quot;服务器端口(默认为8888)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//命令行解析</span></span><br><span class="line">	flag.Parse()</span><br><span class="line"></span><br><span class="line">	client := NewClient(serverIp, serverPort)</span><br><span class="line">	<span class="keyword">if</span> client == <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;连接服务器失败...&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//单独开启一个goroutine处理server的回执消息</span></span><br><span class="line">	<span class="keyword">go</span> client.DealResponse()</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;连接服务器成功...&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//启动客户端的业务</span></span><br><span class="line">	client.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang instant-messaging</tag>
      </tags>
  </entry>
  <entry>
    <title>《Go语言编程》笔记之音乐盒demo</title>
    <url>/2023/01/01/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/</url>
    <content><![CDATA[<p>本文为《Go语言编程》第三章所描述的示例实现,主要演示并总结Go语言面向对象编程特性。<br>Go语言的面向对象特性设计简洁,通过接口的设计,摒弃了继承、构造、析构、虚函数等臃肿的机制。<br>Go语言的接口并不是其他语言（C++、Java、C#等）中所提供的接口概念，在Go语言出现之前，接口主要作为不同组件之间的契约存在。对契约的实现是强制的，你必须声明你的确实现了该接口。为了实现一个接口，你需要从该接口继承所有的方法，即使另外有一个接口实现了与该接口完全一样的接口方法甚至名字也相同只不过位于不同的名字空间下，编译器也会认为上面的类只实现了该接口而没有实现定义相同的那个接口。这类接口我们称为侵入式接口。“侵入式”的主要表现在于实现类需要明确声明自己实现了某个接口。这种强制性的接口继承是面向对象编程思想发展过程中一个遭受相当多置疑的特性。<br>在Go语言中，一个类只需要实现了接口要求的所有函数，我们就说这个类实现了该接口。Go语言在接口上的调整有以下三个优点：<br>其一，Go语言的标准库，再也不需要绘制类库的继承树图。你一定见过不少C++、Java、C#类库的继承树图。在Go中，类的继承树并无意义，你只需要知道这个类实现了哪些方法，每个方法是什么含义，就足够了。<br>其二，实现类的时候，只需要关心自己应该提供哪些方法，不用再纠结接口需要拆得多细才合理。接口由使用方按需定义，而不用事前规划。<br>其三，不用为了实现一个接口而导入一个包，因为多引用一个外部的包，就意味着更多的耦合。接口由使用方按自身需求来定义，使用方无需关心是否有其他模块定义过类似的接口。<br>了解了Go语言面向对象的特性之后，可以通过一个音乐盒的小示例来深刻感受。<br>demo地址:<a href="https://github.com/Vector-DY/gostudy/tree/main/musicplayer">https://github.com/Vector-DY/gostudy/tree/main/musicplayer</a></p>
<span id="more"></span>
<p>文件结构<br><img src="/2023/01/01/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/tree.png"><br>实际效果<br><img src="/2023/01/01/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/demo.png"></p>
<h2 id="音乐库管理"><a href="#音乐库管理" class="headerlink" title="音乐库管理"></a>音乐库管理</h2><p>首先先来定义音乐信息的结构体</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> MusicEntry <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id     <span class="keyword">string</span></span><br><span class="line">	Name   <span class="keyword">string</span></span><br><span class="line">	Artist <span class="keyword">string</span></span><br><span class="line">	Source <span class="keyword">string</span></span><br><span class="line">	<span class="built_in">Type</span>   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后实现具体的类型方法，我们使用一个数组切片作为基础存储结构，其他<br>的操作都只是对这个数组切片的包装</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MusicManager <span class="keyword">struct</span> &#123;</span><br><span class="line">	musics []MusicEntry</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMusicManager</span><span class="params">()</span></span> *MusicManager &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;MusicManager&#123;<span class="built_in">make</span>([]MusicEntry, <span class="number">0</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Len() <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(m.musics)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Get(index <span class="type">int</span>) (music *MusicEntry, err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">len</span>(m.musics) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;Index out of range.&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> &amp;m.musics[index], <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基本增删查改操作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Find(name <span class="type">string</span>) *MusicEntry &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(m.musics) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, m := <span class="keyword">range</span> m.musics &#123;</span><br><span class="line">		<span class="keyword">if</span> m.Name == name &#123;</span><br><span class="line">			<span class="keyword">return</span> &amp;m</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Add(music *MusicEntry) &#123;</span><br><span class="line">	m.musics = <span class="built_in">append</span>(m.musics, *music)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Remove(index <span class="type">int</span>) *MusicEntry &#123;</span><br><span class="line">	<span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">len</span>(m.musics) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	removedMusic := &amp;m.musics[index]</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> index &lt; <span class="built_in">len</span>(m.musics)<span class="number">-1</span> &#123;</span><br><span class="line">		m.musics = <span class="built_in">append</span>(m.musics[:index<span class="number">-1</span>], m.musics[index+<span class="number">1</span>:]...)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">		m.musics = <span class="built_in">make</span>([]MusicEntry, <span class="number">0</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		m.musics = m.musics[:index<span class="number">-1</span>]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> removedMusic</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> RemoveByName(name <span class="type">string</span>) *MusicEntry &#123;</span><br><span class="line">	index := <span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> i, item := <span class="keyword">range</span> m.musics &#123;</span><br><span class="line">		<span class="keyword">if</span> item.Name == name &#123;</span><br><span class="line">			index = i</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> index == <span class="number">-1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> m.Remove(index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="音乐播放模块"><a href="#音乐播放模块" class="headerlink" title="音乐播放模块"></a>音乐播放模块</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Player interface &#123;</span><br><span class="line">	<span class="constructor">Play(<span class="params">source</span> <span class="params">string</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="constructor">Play(<span class="params">source</span>, <span class="params">mtype</span> <span class="params">string</span>)</span> &#123;</span><br><span class="line">	var p Player</span><br><span class="line">	p.<span class="constructor">Play(<span class="params">source</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id><a href="#" class="headerlink" title></a></h2><p>简单的小示例，自行编写main函数编译运行即可，重在理解音乐库管理中的面向对象特性。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
</search>
