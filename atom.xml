<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>丁丁的博客</title>
  
  
  <link href="http://dyang.com.cn/atom.xml" rel="self"/>
  
  <link href="http://dyang.com.cn/"/>
  <updated>2023-01-01T08:48:51.881Z</updated>
  <id>http://dyang.com.cn/</id>
  
  <author>
    <name>Ding Yang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Go语言编程》笔记之音乐盒demo</title>
    <link href="http://dyang.com.cn/2023/01/01/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/"/>
    <id>http://dyang.com.cn/2023/01/01/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/</id>
    <published>2023-01-01T07:50:53.000Z</published>
    <updated>2023-01-01T08:48:51.881Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/test.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/test.jpeg&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>golang学习-即时通讯系统demo</title>
    <link href="http://dyang.com.cn/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/"/>
    <id>http://dyang.com.cn/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/</id>
    <published>2022-12-31T16:30:46.000Z</published>
    <updated>2023-01-01T08:43:03.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简易的即时通讯系统的模拟demo"><a href="#简易的即时通讯系统的模拟demo" class="headerlink" title="简易的即时通讯系统的模拟demo"></a>简易的即时通讯系统的模拟demo</h1><p>基本项目结构如下<br><img src="/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/tree.png"><br>项目地址： <a href="https://github.com/Vector-DY/Instant-Messaging-demo">https://github.com/Vector-DY/Instant-Messaging-demo</a></p><h2 id="server构建"><a href="#server构建" class="headerlink" title="server构建"></a>server构建</h2><p>定义基本server类型及服务器接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">type Server struct &#123;</span><br><span class="line">Ip   string</span><br><span class="line">Port int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewServer(ip string, port int) *Server &#123;</span><br><span class="line">server := &amp;Server&#123;</span><br><span class="line">Ip:        ip,</span><br><span class="line">Port:      port,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return server</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (s *Server) Start() &#123;</span><br><span class="line">//socket listen</span><br><span class="line">listener, err := net.Listen(&quot;tcp&quot;, fmt.Sprintf(&quot;%s:%d&quot;, s.Ip, s.Port))</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(&quot;net.Listen err:&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">//close listen socket</span><br><span class="line">defer listener.Close(）</span><br><span class="line"></span><br><span class="line">for &#123;</span><br><span class="line">//accept</span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(&quot;listener accept err:&quot;, err)</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">///do handler</span><br><span class="line">go s.Handler(conn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h2><h3 id="用户结构构建"><a href="#用户结构构建" class="headerlink" title="用户结构构建"></a>用户结构构建</h3><p>用户板块结构如下图所示<br>使用Map记录在线用户信息，用户上线后向服务器发出请求，服务器为每一个用户分配单独的channel传递消息<br><img src="/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/user.png"><br>用户对象及方法定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">Name string</span><br><span class="line">Addr string</span><br><span class="line">C    chan string  </span><br><span class="line">conn net.Conn //用户属于哪一个连接</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewUser(conn net.Conn) *User &#123;</span><br><span class="line">userAddr := conn.RemoteAddr().String()</span><br><span class="line"></span><br><span class="line">user := &amp;User&#123;</span><br><span class="line">Name: userAddr,</span><br><span class="line">Addr: userAddr,</span><br><span class="line">C:    make(chan string),</span><br><span class="line">conn: conn,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//启动监听当前user channel消息的goroutine</span><br><span class="line">go user.ListenMessage()</span><br><span class="line"></span><br><span class="line">return user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器端需要增添存储用户数据的数据结构及处理用户业务的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">type Server struct &#123;</span><br><span class="line">Ip   string</span><br><span class="line">Port int</span><br><span class="line"></span><br><span class="line">//在线用户列表</span><br><span class="line">OnlineMap map[string]*User</span><br><span class="line">mapLock   sync.RWMutex</span><br><span class="line"></span><br><span class="line">//消息广播的channel</span><br><span class="line">Message chan string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (s *Server) Handler(conn net.Conn) &#123;&#125;</span><br><span class="line">//广播消息的方法</span><br><span class="line">func (s *Server) BroadCast(user *User, msg string) &#123;</span><br><span class="line">sendMsg := &quot;[&quot; + user.Addr + &quot;]&quot; + user.Name + &quot;:&quot; + msg</span><br><span class="line">s.Message &lt;- sendMsg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 监听Message广播消息channel的goroutine,一旦有消息就发送给全部的在线User</span><br><span class="line">func (s *Server) ListenMessager() &#123;</span><br><span class="line">for &#123;</span><br><span class="line">msg := &lt;-s.Message</span><br><span class="line"></span><br><span class="line">//将msg发送给全部的在线User</span><br><span class="line">s.mapLock.Lock()</span><br><span class="line">for _, cli := range s.OnlineMap &#123;</span><br><span class="line">cli.C &lt;- msg</span><br><span class="line">&#125;</span><br><span class="line">s.mapLock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务器监听程序中，可以单独开辟一个goroutine监听Message广播消息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//启动监听Message的goroutine</span><br><span class="line">go s.ListenMessager()</span><br></pre></td></tr></table></figure><h3 id="用户业务层封装"><a href="#用户业务层封装" class="headerlink" title="用户业务层封装"></a>用户业务层封装</h3><p>一些消息方法我们之前运行在了server当中,所以需要将在server中处理的用户业务封装入用户模块,降低程序的耦合性。<br>在用户对象中加入server属性,表示所关联的服务器,处理用户在服务端的业务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">Name string</span><br><span class="line">Addr string</span><br><span class="line">C    chan string</span><br><span class="line">conn net.Conn</span><br><span class="line"></span><br><span class="line">server *Server</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用户的上线业务</span><br><span class="line">func (u *User) Online() &#123;</span><br><span class="line">//用户上线,将用户加入到OnlineMap中</span><br><span class="line">u.server.mapLock.Lock()</span><br><span class="line">u.server.OnlineMap[u.Name] = u</span><br><span class="line">u.server.mapLock.Unlock()</span><br><span class="line"></span><br><span class="line">//广播当前用户上线信息</span><br><span class="line">u.server.BroadCast(u, &quot;已上线&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 用户的下线业务</span><br><span class="line">func (u *User) Offline() &#123;</span><br><span class="line">//用户下线,将用户从OnlineMap中删除</span><br><span class="line">u.server.mapLock.Lock()</span><br><span class="line">delete(u.server.OnlineMap, u.Name)</span><br><span class="line">u.server.mapLock.Unlock()</span><br><span class="line"></span><br><span class="line">//广播当前用户上线信息</span><br><span class="line">u.server.BroadCast(u, &quot;已下线&quot;)</span><br><span class="line">&#125;</span><br><span class="line">//用户的消息业务</span><br><span class="line">func (u *User) DoMessage(msg string) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="用户功能扩展"><a href="#用户功能扩展" class="headerlink" title="用户功能扩展"></a>用户功能扩展</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 给当前User对应的客户端发送消息</span><br><span class="line">// 通过指令处理用户请求</span><br><span class="line">func (u *User) SendMsg(msg string) &#123;</span><br><span class="line">u.conn.Write([]byte(msg))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在线用户查询功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if msg == &quot;who&quot; &#123;</span><br><span class="line">//查询当前在线用户</span><br><span class="line">u.server.mapLock.Lock()</span><br><span class="line">for _, user := range u.server.OnlineMap &#123;</span><br><span class="line">onlineMsg := &quot;[&quot; + user.Addr + &quot;]&quot; + user.Name + &quot;:&quot; + &quot;在线...\n&quot;</span><br><span class="line">u.SendMsg(onlineMsg)</span><br><span class="line">&#125;</span><br><span class="line">u.server.mapLock.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改名功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">if len(msg) &gt; 7 &amp;&amp; msg[:7] == &quot;rename|&quot; &#123;</span><br><span class="line">//消息格式：rename|XX</span><br><span class="line">newName := strings.Split(msg, &quot;|&quot;)[1]</span><br><span class="line">//判断name是否存在</span><br><span class="line">_, ok := u.server.OnlineMap[newName]</span><br><span class="line">if ok &#123;</span><br><span class="line">u.SendMsg(&quot;当前用户名被使用\n&quot;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">u.server.mapLock.Lock()</span><br><span class="line">delete(u.server.OnlineMap, u.Name)</span><br><span class="line">u.server.OnlineMap[newName] = u</span><br><span class="line">u.server.mapLock.Unlock()</span><br><span class="line"></span><br><span class="line">u.Name = newName</span><br><span class="line">u.SendMsg(&quot;您已更新用户名&quot; + u.Name + &quot;\n&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>超时离线功能<br>在服务器的阻塞执行进程中判断用户是否在线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//监听用户是否活跃的channel</span><br><span class="line">isLive := make(chan bool)</span><br><span class="line"></span><br><span class="line">select &#123;</span><br><span class="line">case &lt;-isLive:</span><br><span class="line">//当前用户是活跃的,应该重置定时器</span><br><span class="line">//不做任何事情,激活select,更新下边定时器</span><br><span class="line">case &lt;-time.After((time.Second * 120)):</span><br><span class="line">//已经超时</span><br><span class="line">//将当前Use强制关闭</span><br><span class="line">user.SendMsg(&quot;登录已超时&quot;)</span><br><span class="line">//注销资源</span><br><span class="line">close(user.C)</span><br><span class="line"></span><br><span class="line">//关闭连接</span><br><span class="line">conn.Close()</span><br></pre></td></tr></table></figure><p>私聊功能<br>获取对方的用户对象信息并发送信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">if len(msg) &gt; 4 &amp;&amp; msg[:3] == &quot;to|&quot; &#123;</span><br><span class="line">//消息格式 to|XX|msg</span><br><span class="line"></span><br><span class="line">//1 获取对方用户名</span><br><span class="line">remoteName := strings.Split(msg, &quot;|&quot;)[1]</span><br><span class="line">if remoteName == &quot;&quot; &#123;</span><br><span class="line">u.SendMsg(&quot;usage : to|XX|msg \n&quot;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2 根据用户名得到User对象</span><br><span class="line">remoteUser, ok := u.server.OnlineMap[remoteName]</span><br><span class="line">if !ok &#123;</span><br><span class="line">u.SendMsg(&quot;该用户名不存在\n&quot;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//3 获取消息内容,通过对方的User对象将消息内容发送给过去</span><br><span class="line">content := strings.Split(msg, &quot;|&quot;)[2]</span><br><span class="line">if content == &quot;&quot; &#123;</span><br><span class="line">u.SendMsg(&quot;无内容，请重发\n&quot;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">remoteUser.SendMsg(u.Name + &quot;对你说：&quot; + content + &quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h2><p>处理用户输入,与服务端交互。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">type Client struct &#123;</span><br><span class="line">ServerIp   string</span><br><span class="line">ServerPort int</span><br><span class="line">Name       string</span><br><span class="line">conn       net.Conn</span><br><span class="line">flag       int //当前客户端模式</span><br><span class="line">&#125;</span><br><span class="line">func init() &#123;</span><br><span class="line">flag.StringVar(&amp;serverIp, &quot;ip&quot;, &quot;127.0.0.1&quot;, &quot;服务器IP地址(默认为127.0.0.1)&quot;)</span><br><span class="line">flag.IntVar(&amp;serverPort, &quot;port&quot;, 8888, &quot;服务器端口(默认为8888)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">//命令行解析</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">client := NewClient(serverIp, serverPort)</span><br><span class="line">if client == nil &#123;</span><br><span class="line">fmt.Println(&quot;&gt;&gt;&gt;&gt;&gt;连接服务器失败...&quot;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">//单独开启一个goroutine处理server的回执消息</span><br><span class="line">go client.DealResponse()</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;&gt;&gt;&gt;&gt;&gt;连接服务器成功...&quot;)</span><br><span class="line"></span><br><span class="line">//启动客户端的业务</span><br><span class="line">client.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简易的即时通讯系统的模拟demo&quot;&gt;&lt;a href=&quot;#简易的即时通讯系统的模拟demo&quot; class=&quot;headerlink&quot; title=&quot;简易的即时通讯系统的模拟demo&quot;&gt;&lt;/a&gt;简易的即时通讯系统的模拟demo&lt;/h1&gt;&lt;p&gt;基本项目结构如下&lt;br&gt;&lt;i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>happynewyear</title>
    <link href="http://dyang.com.cn/2022/12/31/happynewyear/"/>
    <id>http://dyang.com.cn/2022/12/31/happynewyear/</id>
    <published>2022-12-31T14:30:56.000Z</published>
    <updated>2022-12-31T16:00:04.487Z</updated>
    
    <content type="html"><![CDATA[<p>苏轼有句话：“犯其至难而图其至远”，意思是说“向最难之处攻坚，追求最远大的目标”。路虽远，行则将至；事虽难，做则必成。只要有愚公移山的志气、滴水穿石的毅力，脚踏实地，埋头苦干，积跬步以至千里，就一定能够把宏伟目标变为美好现实。<br>新年的钟声即将敲响，让我们怀着对未来的美好向往，共同迎接2023年的第一缕阳光。<br>祝愿祖国繁荣昌盛、国泰民安！祝愿世界和平美好、幸福安宁！祝愿大家新年快乐、皆得所愿！ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;苏轼有句话：“犯其至难而图其至远”，意思是说“向最难之处攻坚，追求最远大的目标”。路虽远，行则将至；事虽难，做则必成。只要有愚公移山的志气、滴水穿石的毅力，脚踏实地，埋头苦干，积跬步以至千里，就一定能够把宏伟目标变为美好现实。&lt;br&gt;新年的钟声即将敲响，让我们怀着对未来的美</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>newpapaername</title>
    <link href="http://dyang.com.cn/2022/12/31/newpapaername/"/>
    <id>http://dyang.com.cn/2022/12/31/newpapaername/</id>
    <published>2022-12-31T07:16:28.000Z</published>
    <updated>2022-12-31T16:00:02.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="test-hexo"><a href="#test-hexo" class="headerlink" title="test hexo"></a>test hexo</h1><pre><code>fum main()&#123;    print(&quot;hello hexo&quot;)&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;test-hexo&quot;&gt;&lt;a href=&quot;#test-hexo&quot; class=&quot;headerlink&quot; title=&quot;test hexo&quot;&gt;&lt;/a&gt;test hexo&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;fum main()&amp;#123;
    print(&amp;quot;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://dyang.com.cn/2022/12/31/hello-world/"/>
    <id>http://dyang.com.cn/2022/12/31/hello-world/</id>
    <published>2022-12-30T16:41:16.958Z</published>
    <updated>2022-12-31T15:59:56.382Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
