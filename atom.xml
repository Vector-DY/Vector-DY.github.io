<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>丁丁的博客</title>
  
  
  <link href="http://dyang.com.cn/atom.xml" rel="self"/>
  
  <link href="http://dyang.com.cn/"/>
  <updated>2023-01-03T07:46:47.242Z</updated>
  <id>http://dyang.com.cn/</id>
  
  <author>
    <name>Ding Yang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DFS剪枝与优化</title>
    <link href="http://dyang.com.cn/2023/01/02/DFS%E5%89%AA%E6%9E%9D%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <id>http://dyang.com.cn/2023/01/02/DFS%E5%89%AA%E6%9E%9D%E4%B8%8E%E4%BC%98%E5%8C%96/</id>
    <published>2023-01-02T13:13:52.000Z</published>
    <updated>2023-01-03T07:46:47.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无论在深搜还是宽搜当中，我们都需要对所有的情况进行暴力枚举，要降低我们在深度优先搜索时的时间开销，剪枝优化至关重要。在具体的题目中，我们可以考虑的剪枝方法主要有以下五个方向：<br>1.优化搜索顺序：不同的搜索顺序会产生不同的搜索树规模，在大部分情况下，应当优先搜索分支较少的节点。<br>2.排除等效冗余：有些结果是数据的组合而无需考虑组内顺序，这时我们需要控制不去搜索重复状态，排除冗余。<br>3.可行性剪枝：在搜索的过程当中对当前的状态随时进行检查，发现当前分支已无法到达递归边界或已无法满足结果要求可直接回溯。<br>4.最优性剪枝：当我们发现当前分支无论数和都比最优解要差时，可提前退出。<br>5.记忆化搜索：我们可以记录每一个状态的搜索结果，当重复遍历时可以直接返回。<span id="more"></span>  </p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p><strong>ACwing 165</strong><br>链接：<a href="https://www.acwing.com/problem/content/167/">https://www.acwing.com/problem/content/167/</a><br>翰翰和达达饲养了 N 只小猫，这天，小猫们要去爬山。<br>经历了千辛万苦，小猫们终于爬上了山顶，但是疲倦的它们再也不想徒步走下山了（呜咕&gt;_&lt;）。<br>翰翰和达达只好花钱让它们坐索道下山。<br>索道上的缆车最大承重量为 W，而 N 只小猫的重量分别是 C1、C2……CN。<br>当然，每辆缆车上的小猫的重量之和不能超过 W。<br>每租用一辆缆车，翰翰和达达就要付 1 美元，所以他们想知道，最少需要付多少美元才能把这 N 只小猫都运送下山。<br><strong>输入格式</strong><br>第 1 行：包含两个用空格隔开的整数，N 和 W。<br>第 2..N+1 行：每行一个整数，其中第 i+1 行的整数表示第 i 只小猫的重量 Ci。<br><strong>输出格式</strong><br>输出一个整数，表示最少需要多少美元，也就是最少需要多少辆缆车。<br><strong>数据范围</strong><br>1≤N≤18,<br>1≤Ci≤W≤108  </p><p>可通过该问题体会一下几种剪枝的方法。<br>在DFS问题中我们首先考虑搜索顺序再思考其他的剪枝方法，要使未来的搜索分支较少，我们应当优先枚举较大的重量，其次对每辆缆车所需重量之和进行可行性剪枝，同时我们注意到本题要求最优解，所以可以记录当前的最优结果，当搜索分支已经超过最优解时直接跳出,在考虑好剪枝方法后，我们只需打板并注意回溯即可，非常简单。  </p><p><strong>完整代码如下</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"><span class="type">int</span> ans = N;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="comment">//最优性剪枝</span></span><br><span class="line">    <span class="keyword">if</span>(k &gt;= ans)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(u == n)&#123;</span><br><span class="line">        ans = k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] + w[u] &lt;= m)&#123; <span class="comment">//可行性剪枝</span></span><br><span class="line">            s[i] += w[u];</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>,k);</span><br><span class="line">            s[i] -= w[u]; <span class="comment">//恢复现场</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    s[k] = w[u];</span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>,k + <span class="number">1</span>);</span><br><span class="line">    s[k] = <span class="number">0</span>; <span class="comment">//恢复现场</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)cin&gt;&gt;w[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//优化搜索顺序</span></span><br><span class="line">    <span class="built_in">sort</span>(w,w + n,cmp);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数独问题"><a href="#数独问题" class="headerlink" title="数独问题"></a>数独问题</h2><p>比较经典的DFS例题<br>数独是一种传统益智游戏，你需要把一个 9×9 的数独补充完整，使得数独中每行、每列、每个 3×3 的九宫格内数字 1∼9 均恰好出现一次。<br>请编写一个程序填写数独。<br><strong>输入格式</strong><br>输入包含多组测试用例。<br>每个测试用例占一行，包含 81 个字符，代表数独的 81 个格内数据（顺序总体由上到下，同行由左到右）。<br>每个字符都是一个数字（1−9）或一个 .（表示尚未填充）。<br>您可以假设输入中的每个谜题都只有一个解决方案。<br>文件结尾处为包含单词 end 的单行，表示输入结束。<br><strong>输出格式</strong><br>每个测试用例，输出一行数据，代表填充完全后的数独。  </p><p>相应链接：<br><a href="http://poj.org/problem?id=3074">http://poj.org/problem?id=3074</a><br><a href="https://www.acwing.com/problem/content/168/">https://www.acwing.com/problem/content/168/</a><br><a href="https://leetcode.cn/problems/sudoku-solver/">https://leetcode.cn/problems/sudoku-solver/</a>   </p><p>这道题目中没有太多的剪枝方法，但是可以用位运算进行优化，主要考虑搜索顺序、可行性及位运算优化。对于每一行列及九宫格中，可用一个9位二进制数来记录当前行、列、九宫格的状态，某一位为1时代表该位已被填上数字，在判断某位置是否可以填数时，我们将行、列及九宫格的状态求与，即可判断可否填数。<br>求二进制表示中的1可用lowbit函数来求解，代表当前数二进制表示中最低位的值。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">define</span> lowbit(<span class="keyword">x</span>) (<span class="keyword">x</span> &amp; -<span class="keyword">x</span>)</span><br></pre></td></tr></table></figure><p>也可直接使用__builtin_popcount()函数来实现，__builtin_popcount属于GCC提供的指令，也是通过打表实现，时间复杂度O(1)。<br>手动打表则定义ones[],map[]数组分别表示0-2^9中各个状态有多少个1、当前数为2的多少次方。<br>为优化搜索顺序，我们从空格数最少的状态开始搜索。<br>另外注意当前代码目前会卡常数TLE，需要开O2优化。</p><p><strong>完整代码如下</strong>  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">9</span>,M = <span class="number">1</span> &lt;&lt; N; </span><br><span class="line"><span class="type">int</span> ones[M],map[M]; <span class="comment">//map表示的是2的次方 map[logn]=i,ones表示0-2^9中的数中每个状态有多少个1</span></span><br><span class="line"><span class="type">int</span> row[N],col[N],cell[<span class="number">3</span>][<span class="number">3</span>]; <span class="comment">//各行列九宫格状态</span></span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span>  <span class="comment">// 返回末尾的1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> row[x] &amp; col[y] &amp; cell[x / <span class="number">3</span>][y / <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;  <span class="comment">//初始状态 行列9宫格没有填</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">        row[i] = col[i] = (<span class="number">1</span> &lt;&lt; N) - <span class="number">1</span>; <span class="comment">//2^9 - 1种状态</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; <span class="number">3</span>;j++)&#123;</span><br><span class="line">            cell[i][j] = (<span class="number">1</span> &lt;&lt; N) - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> t,<span class="type">bool</span> is_set)</span></span>&#123;   <span class="comment">//辅助函数 填数或删数 通过is_set进行判断</span></span><br><span class="line">    <span class="keyword">if</span>(is_set)s[x * N + y] = <span class="string">&#x27;1&#x27;</span> + t;</span><br><span class="line">    <span class="keyword">else</span> s[x * N + y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> v = <span class="number">1</span> &lt;&lt; t;</span><br><span class="line">    <span class="keyword">if</span>(!is_set)v = -v;</span><br><span class="line">    </span><br><span class="line">    row[x] -= v;</span><br><span class="line">    col[y] -= v;</span><br><span class="line">    cell[x / <span class="number">3</span>][y / <span class="number">3</span>] -= v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!cnt)<span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//填满所有空格时结束</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> minv = <span class="number">10</span>;  <span class="comment">//最多可以填10个数</span></span><br><span class="line">    <span class="type">int</span> x,y; <span class="comment">//循环完后x y存储的就是分支数量最少的格子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; N;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i * N + j] == <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                <span class="type">int</span> state = <span class="built_in">get</span>(i,j);</span><br><span class="line">                <span class="keyword">if</span>(ones[state] &lt; minv)&#123;</span><br><span class="line">                    minv = ones[state];</span><br><span class="line">                    x = i,y = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> state = <span class="built_in">get</span>(x,y);  <span class="comment">//从当前位置开始搜索</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = state; i ;i -= <span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        <span class="type">int</span> t = map[<span class="built_in">lowbit</span>(i)];   <span class="comment">//从表中取数</span></span><br><span class="line">        <span class="built_in">draw</span>(x,y,t,<span class="literal">true</span>);           </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dfs</span>(cnt - <span class="number">1</span>))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">draw</span>(x,y,t,<span class="literal">false</span>);        <span class="comment">//回溯后恢复现场</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; N;i++)map[<span class="number">1</span> &lt;&lt; i] = i; <span class="comment">//打表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">1</span> &lt;&lt; N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; N;j++)&#123;</span><br><span class="line">            ones[i] += i &gt;&gt; j &amp; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s,s[<span class="number">0</span>] != <span class="string">&#x27;e&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;<span class="comment">//空格的数目  </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,k = <span class="number">0</span>;i &lt; N;i++)&#123;   <span class="comment">//输入数独并统计空格数目</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; N;j++,k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[k] != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> t = s[k] - <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                    <span class="built_in">draw</span>(i,j,t,<span class="literal">true</span>);     </span><br><span class="line">                &#125;<span class="keyword">else</span> cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">dfs</span>(cnt);</span><br><span class="line">        <span class="built_in">puts</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展练习"><a href="#扩展练习" class="headerlink" title="扩展练习"></a>扩展练习</h2><p><strong>sticks</strong><br>乔治拿来一组等长的木棒，将它们随机地砍断，使得每一节木棍的长度都不超过 50 个长度单位。<br>然后他又想把这些木棍恢复到为裁截前的状态，但忘记了初始时有多少木棒以及木棒的初始长度。<br>请你设计一个程序，帮助乔治计算木棒的可能最小长度。<br>每一节木棍的长度都用大于零的整数表示。<br><strong>输入格式</strong><br>输入包含多组数据，每组数据包括两行。<br>第一行是一个不超过 64 的整数，表示砍断之后共有多少节木棍。<br>第二行是截断以后，所得到的各节木棍的长度。<br>在最后一组数据之后，是一个零。<br><strong>输出格式</strong><br>为每组数据，分别输出原始木棒的可能最小长度，每组数据占一行。<br><strong>数据范围</strong><br>数据保证每一节木棍的长度均不大于 50。<br>本题链接：<a href="https://vjudge.net/problem/UVA-307">https://vjudge.net/problem/UVA-307</a><br>首先考虑搜索顺序，为使未来分支较少，我们优先枚举长度较大的木棍。<br>其次，枚举木棒的长度时，长度length要被所有木棍的总长度sum整除才能符合题意。<br>比较细节的是等效冗余的考虑，主要有以下四个方面：<br>1.组内顺序不影响结果，可以不用重复搜索<br>2.在枚举木棍的过程中，如果当前长度的木棍加入到方案中无法满足要求，则之后的相同长度的木棍都可以跳过<br>3.如果木棒枚举第一根木棍时无法满足要求，则可直接跳过，一定无法满足要求<br>4.同3，如果木棒枚举最后一根木棍时无法满足要求，则可直接跳过<br>可通过反证法证明3.4<br><strong>完整代码如下</strong>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">70</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> sum,length;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> cur,<span class="type">int</span> start)</span></span>&#123;  <span class="comment">//当前组，当前组长度，当前组枚举到的位置</span></span><br><span class="line">    <span class="keyword">if</span>(u * length == sum)<span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//总长度达到，返回结果</span></span><br><span class="line">    <span class="keyword">if</span>(cur == length)<span class="keyword">return</span> <span class="built_in">dfs</span>(u + <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>); <span class="comment">//枚举下一组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = start;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st[i] || cur + w[i] &gt; length)<span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        st[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dfs</span>(u,cur + w[i],i + <span class="number">1</span>))<span class="keyword">return</span> <span class="literal">true</span>;   <span class="comment">//枚举下一根木棍</span></span><br><span class="line">        st[i] = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!cur || cur + w[i] == length)<span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//3.4</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> j = i;   <span class="comment">//跳过相同长度</span></span><br><span class="line">        <span class="keyword">while</span>(j &lt; n &amp;&amp; w[j] == w[i])j++;</span><br><span class="line">        i = j - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n,n)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;w[i];</span><br><span class="line">            sum += w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">sort</span>(w,w + n,cmp);  <span class="comment">//优化搜索顺序</span></span><br><span class="line">        </span><br><span class="line">        length = <span class="number">1</span>;   <span class="comment">//外层枚举木棒长度</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum % length == <span class="number">0</span> &amp;&amp; <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))&#123;   <span class="comment">//整除要求</span></span><br><span class="line">                cout&lt;&lt;length&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;无论在深搜还是宽搜当中，我们都需要对所有的情况进行暴力枚举，要降低我们在深度优先搜索时的时间开销，剪枝优化至关重要。在具体的题目中，我们可以考虑的剪枝方法主要有以下五个方向：&lt;br&gt;1.优化搜索顺序：不同的搜索顺序会产生不同的搜索树规模，在大部分情况下，应当优先搜索分支较少的节点。&lt;br&gt;2.排除等效冗余：有些结果是数据的组合而无需考虑组内顺序，这时我们需要控制不去搜索重复状态，排除冗余。&lt;br&gt;3.可行性剪枝：在搜索的过程当中对当前的状态随时进行检查，发现当前分支已无法到达递归边界或已无法满足结果要求可直接回溯。&lt;br&gt;4.最优性剪枝：当我们发现当前分支无论数和都比最优解要差时，可提前退出。&lt;br&gt;5.记忆化搜索：我们可以记录每一个状态的搜索结果，当重复遍历时可以直接返回。&lt;/p&gt;</summary>
    
    
    
    <category term="algorithm" scheme="http://dyang.com.cn/categories/algorithm/"/>
    
    
    <category term="dfs" scheme="http://dyang.com.cn/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>《Go语言编程》笔记之音乐盒demo</title>
    <link href="http://dyang.com.cn/2023/01/01/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/"/>
    <id>http://dyang.com.cn/2023/01/01/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/</id>
    <published>2023-01-01T07:50:53.000Z</published>
    <updated>2023-01-01T11:34:17.504Z</updated>
    
    <content type="html"><![CDATA[<p>本文为《Go语言编程》第三章所描述的示例实现,主要演示并总结Go语言面向对象编程特性。<br>Go语言的面向对象特性设计简洁,通过接口的设计,摒弃了继承、构造、析构、虚函数等臃肿的机制。<br>Go语言的接口并不是其他语言（C++、Java、C#等）中所提供的接口概念，在Go语言出现之前，接口主要作为不同组件之间的契约存在。对契约的实现是强制的，你必须声明你的确实现了该接口。为了实现一个接口，你需要从该接口继承所有的方法，即使另外有一个接口实现了与该接口完全一样的接口方法甚至名字也相同只不过位于不同的名字空间下，编译器也会认为上面的类只实现了该接口而没有实现定义相同的那个接口。这类接口我们称为侵入式接口。“侵入式”的主要表现在于实现类需要明确声明自己实现了某个接口。这种强制性的接口继承是面向对象编程思想发展过程中一个遭受相当多置疑的特性。<br>在Go语言中，一个类只需要实现了接口要求的所有函数，我们就说这个类实现了该接口。Go语言在接口上的调整有以下三个优点：<br>其一，Go语言的标准库，再也不需要绘制类库的继承树图。你一定见过不少C++、Java、C#类库的继承树图。在Go中，类的继承树并无意义，你只需要知道这个类实现了哪些方法，每个方法是什么含义，就足够了。<br>其二，实现类的时候，只需要关心自己应该提供哪些方法，不用再纠结接口需要拆得多细才合理。接口由使用方按需定义，而不用事前规划。<br>其三，不用为了实现一个接口而导入一个包，因为多引用一个外部的包，就意味着更多的耦合。接口由使用方按自身需求来定义，使用方无需关心是否有其他模块定义过类似的接口。<br>了解了Go语言面向对象的特性之后，可以通过一个音乐盒的小示例来深刻感受。<br>demo地址:<a href="https://github.com/Vector-DY/gostudy/tree/main/musicplayer">https://github.com/Vector-DY/gostudy/tree/main/musicplayer</a></p><span id="more"></span><p>文件结构<br><img src="/2023/01/01/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/tree.png"><br>实际效果<br><img src="/2023/01/01/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/demo.png"></p><h2 id="音乐库管理"><a href="#音乐库管理" class="headerlink" title="音乐库管理"></a>音乐库管理</h2><p>首先先来定义音乐信息的结构体</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> MusicEntry <span class="keyword">struct</span> &#123;</span><br><span class="line">Id     <span class="keyword">string</span></span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">Artist <span class="keyword">string</span></span><br><span class="line">Source <span class="keyword">string</span></span><br><span class="line"><span class="built_in">Type</span>   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后实现具体的类型方法，我们使用一个数组切片作为基础存储结构，其他<br>的操作都只是对这个数组切片的包装</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MusicManager <span class="keyword">struct</span> &#123;</span><br><span class="line">musics []MusicEntry</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMusicManager</span><span class="params">()</span></span> *MusicManager &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;MusicManager&#123;<span class="built_in">make</span>([]MusicEntry, <span class="number">0</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Len() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(m.musics)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Get(index <span class="type">int</span>) (music *MusicEntry, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">len</span>(m.musics) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;Index out of range.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;m.musics[index], <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本增删查改操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Find(name <span class="type">string</span>) *MusicEntry &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(m.musics) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, m := <span class="keyword">range</span> m.musics &#123;</span><br><span class="line"><span class="keyword">if</span> m.Name == name &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;m</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Add(music *MusicEntry) &#123;</span><br><span class="line">m.musics = <span class="built_in">append</span>(m.musics, *music)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Remove(index <span class="type">int</span>) *MusicEntry &#123;</span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">len</span>(m.musics) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">removedMusic := &amp;m.musics[index]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="built_in">len</span>(m.musics)<span class="number">-1</span> &#123;</span><br><span class="line">m.musics = <span class="built_in">append</span>(m.musics[:index<span class="number">-1</span>], m.musics[index+<span class="number">1</span>:]...)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">m.musics = <span class="built_in">make</span>([]MusicEntry, <span class="number">0</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">m.musics = m.musics[:index<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> removedMusic</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> RemoveByName(name <span class="type">string</span>) *MusicEntry &#123;</span><br><span class="line">index := <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i, item := <span class="keyword">range</span> m.musics &#123;</span><br><span class="line"><span class="keyword">if</span> item.Name == name &#123;</span><br><span class="line">index = i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m.Remove(index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="音乐播放模块"><a href="#音乐播放模块" class="headerlink" title="音乐播放模块"></a>音乐播放模块</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Player interface &#123;</span><br><span class="line"><span class="constructor">Play(<span class="params">source</span> <span class="params">string</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="constructor">Play(<span class="params">source</span>, <span class="params">mtype</span> <span class="params">string</span>)</span> &#123;</span><br><span class="line">var p Player</span><br><span class="line">p.<span class="constructor">Play(<span class="params">source</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2><p>简单的小示例，自行编写main函数编译运行即可，重在理解音乐库管理中的面向对象特性。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文为《Go语言编程》第三章所描述的示例实现,主要演示并总结Go语言面向对象编程特性。&lt;br&gt;Go语言的面向对象特性设计简洁,通过接口的设计,摒弃了继承、构造、析构、虚函数等臃肿的机制。&lt;br&gt;Go语言的接口并不是其他语言（C++、Java、C#等）中所提供的接口概念，在Go语言出现之前，接口主要作为不同组件之间的契约存在。对契约的实现是强制的，你必须声明你的确实现了该接口。为了实现一个接口，你需要从该接口继承所有的方法，即使另外有一个接口实现了与该接口完全一样的接口方法甚至名字也相同只不过位于不同的名字空间下，编译器也会认为上面的类只实现了该接口而没有实现定义相同的那个接口。这类接口我们称为侵入式接口。“侵入式”的主要表现在于实现类需要明确声明自己实现了某个接口。这种强制性的接口继承是面向对象编程思想发展过程中一个遭受相当多置疑的特性。&lt;br&gt;在Go语言中，一个类只需要实现了接口要求的所有函数，我们就说这个类实现了该接口。Go语言在接口上的调整有以下三个优点：&lt;br&gt;其一，Go语言的标准库，再也不需要绘制类库的继承树图。你一定见过不少C++、Java、C#类库的继承树图。在Go中，类的继承树并无意义，你只需要知道这个类实现了哪些方法，每个方法是什么含义，就足够了。&lt;br&gt;其二，实现类的时候，只需要关心自己应该提供哪些方法，不用再纠结接口需要拆得多细才合理。接口由使用方按需定义，而不用事前规划。&lt;br&gt;其三，不用为了实现一个接口而导入一个包，因为多引用一个外部的包，就意味着更多的耦合。接口由使用方按自身需求来定义，使用方无需关心是否有其他模块定义过类似的接口。&lt;br&gt;了解了Go语言面向对象的特性之后，可以通过一个音乐盒的小示例来深刻感受。&lt;br&gt;demo地址:&lt;a href=&quot;https://github.com/Vector-DY/gostudy/tree/main/musicplayer&quot;&gt;https://github.com/Vector-DY/gostudy/tree/main/musicplayer&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="golang" scheme="http://dyang.com.cn/categories/golang/"/>
    
    
    <category term="golang" scheme="http://dyang.com.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang学习-即时通讯系统demo</title>
    <link href="http://dyang.com.cn/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/"/>
    <id>http://dyang.com.cn/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/</id>
    <published>2022-12-31T16:30:46.000Z</published>
    <updated>2023-01-01T11:33:06.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简易的即时通讯系统的模拟demo"><a href="#简易的即时通讯系统的模拟demo" class="headerlink" title="简易的即时通讯系统的模拟demo"></a>简易的即时通讯系统的模拟demo</h1><p>基本项目结构如下<br><img src="/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/tree.png"><br>项目地址： <a href="https://github.com/Vector-DY/Instant-Messaging-demo">https://github.com/Vector-DY/Instant-Messaging-demo</a></p><span id="more"></span><h2 id="server构建"><a href="#server构建" class="headerlink" title="server构建"></a>server构建</h2><p>定义基本server类型及服务器接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">Ip   <span class="type">string</span></span><br><span class="line">Port <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(ip <span class="type">string</span>, port <span class="type">int</span>)</span></span> *Server &#123;</span><br><span class="line">server := &amp;Server&#123;</span><br><span class="line">Ip:        ip,</span><br><span class="line">Port:      port,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> server</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Start() &#123;</span><br><span class="line"><span class="comment">//socket listen</span></span><br><span class="line">listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="string">&quot;%s:%d&quot;</span>, s.Ip, s.Port))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;net.Listen err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//close listen socket</span></span><br><span class="line"><span class="keyword">defer</span> listener.Close(）</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//accept</span></span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;listener accept err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///do handler</span></span><br><span class="line"><span class="keyword">go</span> s.Handler(conn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h2><h3 id="用户结构构建"><a href="#用户结构构建" class="headerlink" title="用户结构构建"></a>用户结构构建</h3><p>用户板块结构如下图所示<br>使用Map记录在线用户信息，用户上线后向服务器发出请求，服务器为每一个用户分配单独的channel传递消息<br><img src="/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/user.png"><br>用户对象及方法定义如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="keyword">User</span> <span class="title">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Addr <span class="keyword">string</span></span><br><span class="line">C    chan <span class="keyword">string</span>  </span><br><span class="line">conn net.Conn //用户属于哪一个连接</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewUser(conn net.Conn) *<span class="keyword">User</span> <span class="title">&#123;</span></span><br><span class="line"><span class="title">userAddr</span> := conn.RemoteAddr().<span class="keyword">String</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">user</span> <span class="title">:= &amp;User</span>&#123;</span><br><span class="line">Name: userAddr,</span><br><span class="line">Addr: userAddr,</span><br><span class="line">C:    make(chan <span class="keyword">string</span>),</span><br><span class="line">conn: conn,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//启动监听当前<span class="keyword">user</span> <span class="title">channel</span>消息的goroutine</span><br><span class="line">go user.ListenMessage()</span><br><span class="line"></span><br><span class="line">return <span class="keyword">user</span></span><br><span class="line"><span class="title">&#125;</span></span><br></pre></td></tr></table></figure><p>服务器端需要增添存储用户数据的数据结构及处理用户业务的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">Ip   <span class="type">string</span></span><br><span class="line">Port <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在线用户列表</span></span><br><span class="line">OnlineMap <span class="keyword">map</span>[<span class="type">string</span>]*User</span><br><span class="line">mapLock   sync.RWMutex</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息广播的channel</span></span><br><span class="line">Message <span class="keyword">chan</span> <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Handler(conn net.Conn) &#123;&#125;</span><br><span class="line"><span class="comment">//广播消息的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> BroadCast(user *User, msg <span class="type">string</span>) &#123;</span><br><span class="line">sendMsg := <span class="string">&quot;[&quot;</span> + user.Addr + <span class="string">&quot;]&quot;</span> + user.Name + <span class="string">&quot;:&quot;</span> + msg</span><br><span class="line">s.Message &lt;- sendMsg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听Message广播消息channel的goroutine,一旦有消息就发送给全部的在线User</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> ListenMessager() &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">msg := &lt;-s.Message</span><br><span class="line"></span><br><span class="line"><span class="comment">//将msg发送给全部的在线User</span></span><br><span class="line">s.mapLock.Lock()</span><br><span class="line"><span class="keyword">for</span> _, cli := <span class="keyword">range</span> s.OnlineMap &#123;</span><br><span class="line">cli.C &lt;- msg</span><br><span class="line">&#125;</span><br><span class="line">s.mapLock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务器监听程序中，可以单独开辟一个goroutine监听Message广播消息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>启动监听Message的goroutine</span><br><span class="line">go s.ListenMessager()</span><br></pre></td></tr></table></figure><h3 id="用户业务层封装"><a href="#用户业务层封装" class="headerlink" title="用户业务层封装"></a>用户业务层封装</h3><p>一些消息方法我们之前运行在了server当中,所以需要将在server中处理的用户业务封装入用户模块,降低程序的耦合性。<br>在用户对象中加入server属性,表示所关联的服务器,处理用户在服务端的业务。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">Name string</span><br><span class="line">Addr string</span><br><span class="line">C    chan string</span><br><span class="line">conn net<span class="selector-class">.Conn</span></span><br><span class="line"></span><br><span class="line">server *Server</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户的上线业务</span></span><br><span class="line">func (u *User) <span class="built_in">Online</span>() &#123;</span><br><span class="line"><span class="comment">//用户上线,将用户加入到OnlineMap中</span></span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Lock</span>()</span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span><span class="selector-attr">[u.Name]</span> = u</span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Unlock</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//广播当前用户上线信息</span></span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.BroadCast</span>(u, <span class="string">&quot;已上线&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用户的下线业务</span></span><br><span class="line">func (u *User) <span class="built_in">Offline</span>() &#123;</span><br><span class="line"><span class="comment">//用户下线,将用户从OnlineMap中删除</span></span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Lock</span>()</span><br><span class="line"><span class="built_in">delete</span>(u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span>, u.Name)</span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Unlock</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//广播当前用户上线信息</span></span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.BroadCast</span>(u, <span class="string">&quot;已下线&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户的消息业务</span></span><br><span class="line">func (u *User) <span class="built_in">DoMessage</span>(msg string) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="用户功能扩展"><a href="#用户功能扩展" class="headerlink" title="用户功能扩展"></a>用户功能扩展</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给当前User对应的客户端发送消息</span></span><br><span class="line"><span class="comment">// 通过指令处理用户请求</span></span><br><span class="line">func (u *User) <span class="constructor">SendMsg(<span class="params">msg</span> <span class="params">string</span>)</span> &#123;</span><br><span class="line">u.conn.<span class="constructor">Write([]<span class="params">byte</span>(<span class="params">msg</span>)</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在线用户查询功能。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> msg == <span class="string">&quot;who&quot;</span> &#123;</span><br><span class="line"><span class="comment">//查询当前在线用户</span></span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Lock</span>()</span><br><span class="line"><span class="keyword">for</span> _, user := range u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span> &#123;</span><br><span class="line">onlineMsg := <span class="string">&quot;[&quot;</span> + user<span class="selector-class">.Addr</span> + <span class="string">&quot;]&quot;</span> + user<span class="selector-class">.Name</span> + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;在线...\n&quot;</span></span><br><span class="line">u<span class="selector-class">.SendMsg</span>(onlineMsg)</span><br><span class="line">&#125;</span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Unlock</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改名功能</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(msg) &gt; <span class="number">7</span> &amp;&amp; msg<span class="selector-attr">[:7]</span> == <span class="string">&quot;rename|&quot;</span> &#123;</span><br><span class="line"><span class="comment">//消息格式：rename|XX</span></span><br><span class="line">newName := strings<span class="selector-class">.Split</span>(msg, <span class="string">&quot;|&quot;</span>)<span class="selector-attr">[1]</span></span><br><span class="line"><span class="comment">//判断name是否存在</span></span><br><span class="line">_, ok := u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span><span class="selector-attr">[newName]</span></span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">u<span class="selector-class">.SendMsg</span>(<span class="string">&quot;当前用户名被使用\n&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Lock</span>()</span><br><span class="line"><span class="built_in">delete</span>(u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span>, u.Name)</span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span><span class="selector-attr">[newName]</span> = u</span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Unlock</span>()</span><br><span class="line"></span><br><span class="line">u<span class="selector-class">.Name</span> = newName</span><br><span class="line">u<span class="selector-class">.SendMsg</span>(<span class="string">&quot;您已更新用户名&quot;</span> + u<span class="selector-class">.Name</span> + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>超时离线功能<br>在服务器的阻塞执行进程中判断用户是否在线</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听用户是否活跃的channel</span></span><br><span class="line">isLive := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-isLive:</span><br><span class="line"><span class="comment">//当前用户是活跃的,应该重置定时器</span></span><br><span class="line"><span class="comment">//不做任何事情,激活select,更新下边定时器</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After((time.Second * <span class="number">120</span>)):</span><br><span class="line"><span class="comment">//已经超时</span></span><br><span class="line"><span class="comment">//将当前Use强制关闭</span></span><br><span class="line">user.SendMsg(<span class="string">&quot;登录已超时&quot;</span>)</span><br><span class="line"><span class="comment">//注销资源</span></span><br><span class="line"><span class="built_in">close</span>(user.C)</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">conn.Close()</span><br></pre></td></tr></table></figure><p>私聊功能<br>获取对方的用户对象信息并发送信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(msg) &gt; <span class="number">4</span> &amp;&amp; msg[:<span class="number">3</span>] == <span class="string">&quot;to|&quot;</span> &#123;</span><br><span class="line"><span class="comment">//消息格式 to|XX|msg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1 获取对方用户名</span></span><br><span class="line">remoteName := strings.Split(msg, <span class="string">&quot;|&quot;</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> remoteName == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">u.SendMsg(<span class="string">&quot;usage : to|XX|msg \n&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 根据用户名得到User对象</span></span><br><span class="line">remoteUser, ok := u.server.OnlineMap[remoteName]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">u.SendMsg(<span class="string">&quot;该用户名不存在\n&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 获取消息内容,通过对方的User对象将消息内容发送给过去</span></span><br><span class="line">content := strings.Split(msg, <span class="string">&quot;|&quot;</span>)[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> content == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">u.SendMsg(<span class="string">&quot;无内容，请重发\n&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">remoteUser.SendMsg(u.Name + <span class="string">&quot;对你说：&quot;</span> + content + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h2><p>处理用户输入,与服务端交互。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">ServerIp   <span class="type">string</span></span><br><span class="line">ServerPort <span class="type">int</span></span><br><span class="line">Name       <span class="type">string</span></span><br><span class="line">conn       net.Conn</span><br><span class="line">flag       <span class="type">int</span> <span class="comment">//当前客户端模式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.StringVar(&amp;serverIp, <span class="string">&quot;ip&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;服务器IP地址(默认为127.0.0.1)&quot;</span>)</span><br><span class="line">flag.IntVar(&amp;serverPort, <span class="string">&quot;port&quot;</span>, <span class="number">8888</span>, <span class="string">&quot;服务器端口(默认为8888)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//命令行解析</span></span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">client := NewClient(serverIp, serverPort)</span><br><span class="line"><span class="keyword">if</span> client == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;连接服务器失败...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单独开启一个goroutine处理server的回执消息</span></span><br><span class="line"><span class="keyword">go</span> client.DealResponse()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;连接服务器成功...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动客户端的业务</span></span><br><span class="line">client.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简易的即时通讯系统的模拟demo&quot;&gt;&lt;a href=&quot;#简易的即时通讯系统的模拟demo&quot; class=&quot;headerlink&quot; title=&quot;简易的即时通讯系统的模拟demo&quot;&gt;&lt;/a&gt;简易的即时通讯系统的模拟demo&lt;/h1&gt;&lt;p&gt;基本项目结构如下&lt;br&gt;&lt;img src=&quot;/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/tree.png&quot;&gt;&lt;br&gt;项目地址： &lt;a href=&quot;https://github.com/Vector-DY/Instant-Messaging-demo&quot;&gt;https://github.com/Vector-DY/Instant-Messaging-demo&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="golang" scheme="http://dyang.com.cn/categories/golang/"/>
    
    
    <category term="golang instant-messaging" scheme="http://dyang.com.cn/tags/golang-instant-messaging/"/>
    
  </entry>
  
  <entry>
    <title>happynewyear</title>
    <link href="http://dyang.com.cn/2022/12/31/happynewyear/"/>
    <id>http://dyang.com.cn/2022/12/31/happynewyear/</id>
    <published>2022-12-31T14:30:56.000Z</published>
    <updated>2022-12-31T16:00:04.487Z</updated>
    
    <content type="html"><![CDATA[<p>苏轼有句话：“犯其至难而图其至远”，意思是说“向最难之处攻坚，追求最远大的目标”。路虽远，行则将至；事虽难，做则必成。只要有愚公移山的志气、滴水穿石的毅力，脚踏实地，埋头苦干，积跬步以至千里，就一定能够把宏伟目标变为美好现实。<br>新年的钟声即将敲响，让我们怀着对未来的美好向往，共同迎接2023年的第一缕阳光。<br>祝愿祖国繁荣昌盛、国泰民安！祝愿世界和平美好、幸福安宁！祝愿大家新年快乐、皆得所愿！ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;苏轼有句话：“犯其至难而图其至远”，意思是说“向最难之处攻坚，追求最远大的目标”。路虽远，行则将至；事虽难，做则必成。只要有愚公移山的志气、滴水穿石的毅力，脚踏实地，埋头苦干，积跬步以至千里，就一定能够把宏伟目标变为美好现实。&lt;br&gt;新年的钟声即将敲响，让我们怀着对未来的美</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>newpapaername</title>
    <link href="http://dyang.com.cn/2022/12/31/newpapaername/"/>
    <id>http://dyang.com.cn/2022/12/31/newpapaername/</id>
    <published>2022-12-31T07:16:28.000Z</published>
    <updated>2022-12-31T16:00:02.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="test-hexo"><a href="#test-hexo" class="headerlink" title="test hexo"></a>test hexo</h1><pre><code>fum main()&#123;    print(&quot;hello hexo&quot;)&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;test-hexo&quot;&gt;&lt;a href=&quot;#test-hexo&quot; class=&quot;headerlink&quot; title=&quot;test hexo&quot;&gt;&lt;/a&gt;test hexo&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;fum main()&amp;#123;
    print(&amp;quot;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://dyang.com.cn/2022/12/31/hello-world/"/>
    <id>http://dyang.com.cn/2022/12/31/hello-world/</id>
    <published>2022-12-30T16:41:16.958Z</published>
    <updated>2022-12-31T15:59:56.382Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
