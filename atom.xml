<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>丁丁的博客</title>
  
  
  <link href="http://dyang.com.cn/atom.xml" rel="self"/>
  
  <link href="http://dyang.com.cn/"/>
  <updated>2023-03-12T16:19:02.493Z</updated>
  <id>http://dyang.com.cn/</id>
  
  <author>
    <name>Ding Yang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Effective Modern C++笔记</title>
    <link href="http://dyang.com.cn/2023/03/13/Effective-Modern-C-%E7%AC%94%E8%AE%B0/"/>
    <id>http://dyang.com.cn/2023/03/13/Effective-Modern-C-%E7%AC%94%E8%AE%B0/</id>
    <published>2023-03-12T16:17:13.000Z</published>
    <updated>2023-03-12T16:19:02.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;</summary>
    
    
    
    <category term="C++" scheme="http://dyang.com.cn/categories/C/"/>
    
    
    <category term="cpp" scheme="http://dyang.com.cn/tags/cpp/"/>
    
    <category term="C++" scheme="http://dyang.com.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>字符串题目处理方法</title>
    <link href="http://dyang.com.cn/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <id>http://dyang.com.cn/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</id>
    <published>2023-01-16T14:41:04.000Z</published>
    <updated>2023-01-17T13:50:47.125Z</updated>
    
    <content type="html"><![CDATA[<p>最近两天碰到几道字符串题目，总结记录一下通用的方法，C++要自己写切片函数搞字符串还是有点麻烦，python或者go会更方便一点。</p><span id="more"></span>  <h3 id="切片函数"><a href="#切片函数" class="headerlink" title="切片函数"></a>切片函数</h3><p>一般按空格划分，当碰到类似于单词匹配时可以用来存储每个单词子串，再借助哈希表来求解。</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; <span class="keyword">split</span>(string &amp;<span class="keyword">str</span>,char target)&#123;</span><br><span class="line">        vector&lt;string&gt; res<span class="comment">;</span></span><br><span class="line">        string s(<span class="keyword">str</span>)<span class="comment">;</span></span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">pos</span> = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">pos</span> &lt; s.size())&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">pos</span> &lt; s.size() &amp;&amp; s[<span class="keyword">pos</span>] == target)&#123;</span><br><span class="line">                <span class="keyword">pos</span>++<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> start = <span class="keyword">pos</span><span class="comment">;</span></span><br><span class="line">             <span class="keyword">while</span> (<span class="keyword">pos</span> &lt; s.size() &amp;&amp; s[<span class="keyword">pos</span>] != target) &#123;</span><br><span class="line">                <span class="keyword">pos</span>++<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">pos</span> &gt; start)&#123;</span><br><span class="line">                res.emplace_back(s.substr(start,<span class="keyword">pos</span> - start))<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res<span class="comment">;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><h4 id="Leetcode-1813-句子相似性Ⅲ"><a href="#Leetcode-1813-句子相似性Ⅲ" class="headerlink" title="Leetcode.1813 句子相似性Ⅲ"></a>Leetcode.1813 句子相似性Ⅲ</h4><p>一个句子是由一些单词与它们之间的单个空格组成，且句子的开头和结尾没有多余空格。比方说，”Hello World”，”HELLO”，”hello world hello world”都是句子。每个单词都只包含大写和小写英文字母。<br>如果两个句子sentence1和sentence2，可以通过往其中一个句子插入一个任意的句子（可以是空句子）而得到另一个句子，那么我们称这两个句子是相似的 。比方说，sentence1 &#x3D; “Hello my name is Jane” 且 sentence2 &#x3D; “Hello Jane” ，我们可以往sentence2中 “Hello”和”Jane”之间插入”my name is”得到sentence1。<br>给你两个句子sentence1和sentence2，如果sentence1和sentence2是相似的，请你返回true，否则返回false。<br><a href="https://leetcode.cn/problems/sentence-similarity-iii/">https://leetcode.cn/problems/sentence-similarity-iii/</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string_view&gt; <span class="title">split</span><span class="params">(<span class="type">const</span> string &amp;str,<span class="type">char</span> target)</span></span>&#123;</span><br><span class="line">        vector&lt;string_view&gt; res;</span><br><span class="line">        <span class="function">string_view <span class="title">s</span><span class="params">(str)</span></span>;</span><br><span class="line">        <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(pos &lt; s.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">while</span>(pos &lt; s.<span class="built_in">size</span>() &amp;&amp; s[pos] == target)&#123;</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> start = pos;</span><br><span class="line">             <span class="keyword">while</span> (pos &lt; s.<span class="built_in">size</span>() &amp;&amp; s[pos] != target) &#123;</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pos &gt; start)&#123;</span><br><span class="line">                res.<span class="built_in">emplace_back</span>(s.<span class="built_in">substr</span>(start,pos - start));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">areSentencesSimilar</span><span class="params">(string sentence1, string sentence2)</span> </span>&#123;</span><br><span class="line">        vector&lt;string_view&gt; s1 = <span class="built_in">split</span>(sentence1,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        vector&lt;string_view&gt; s2 = <span class="built_in">split</span>(sentence2,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; s1.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            cout&lt;&lt;s1[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; s2.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            cout&lt;&lt;s2[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; s1.<span class="built_in">size</span>() &amp;&amp; i &lt; s2.<span class="built_in">size</span>() &amp;&amp; s1[i] == s2[i])&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; s1.<span class="built_in">size</span>() - i &amp;&amp; j &lt; s2.<span class="built_in">size</span>() - i &amp;&amp; s1[s1.<span class="built_in">size</span>() - j - <span class="number">1</span>] == s2[s2.<span class="built_in">size</span>() - j - <span class="number">1</span>])&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;j;</span><br><span class="line">        <span class="keyword">return</span> i + j == <span class="built_in">min</span>(s1.<span class="built_in">size</span>(),s2.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Leetcode-2512-奖励最顶尖的-K-名学生"><a href="#Leetcode-2512-奖励最顶尖的-K-名学生" class="headerlink" title="Leetcode.2512 奖励最顶尖的 K 名学生"></a>Leetcode.2512 奖励最顶尖的 K 名学生</h4><p>出自leetcode第94场双周赛<br>给你两个字符串数组positive_feedback和negative_feedback，分别包含表示正面的和负面的词汇。不会有单词同时是正面的和负面的。<br>一开始，每位学生分数为0.每个正面的单词会给学生的分数加3分，每个负面的词会给学生的分数减1分。<br>给你n个学生的评语，用一个下标从0开始的字符串数组report和一个下标从0开始的整数数组student_id表示，其中student_id[i]表示这名学生的ID，这名学生的评语是report[i]。每名学生的ID互不相同。<br>给你一个整数k，请你返回按照得分从高到低最顶尖的k名学生。如果有多名学生分数相同，ID越小排名越前。<br><a href="https://leetcode.cn/problems/reward-top-k-students/">https://leetcode.cn/problems/reward-top-k-students/</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(string &amp;str,<span class="type">char</span> target)</span></span>&#123;</span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        <span class="function">string <span class="title">s</span><span class="params">(str)</span></span>;</span><br><span class="line">        <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(pos &lt; s.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">while</span>(pos &lt; s.<span class="built_in">size</span>() &amp;&amp; s[pos] == target)&#123;</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> start = pos;</span><br><span class="line">            <span class="keyword">while</span>(pos &lt; s.<span class="built_in">size</span>() &amp;&amp; s[pos] != target)&#123;</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pos &gt; start)&#123;</span><br><span class="line">                res.<span class="built_in">emplace_back</span>(s.<span class="built_in">substr</span>(start,pos - start));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topStudents</span><span class="params">(vector&lt;string&gt;&amp; positive_feedback, vector&lt;string&gt;&amp; negative_feedback, vector&lt;string&gt;&amp; report, vector&lt;<span class="type">int</span>&gt;&amp; student_id, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;string&gt; cnt1;</span><br><span class="line">        unordered_set&lt;string&gt; cnt2;</span><br><span class="line">        <span class="type">int</span> n = report.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; hash;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; positive_feedback.<span class="built_in">size</span>();i++)cnt1.<span class="built_in">insert</span>(positive_feedback[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; negative_feedback.<span class="built_in">size</span>();i++)cnt2.<span class="built_in">insert</span>(negative_feedback[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            vector&lt;string&gt; s = <span class="built_in">split</span>(report[i],<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; s.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt1.<span class="built_in">count</span>(s[j]))hash[student_id[i]] += <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">if</span>(cnt2.<span class="built_in">count</span>(s[j]))hash[student_id[i]] -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(student_id.<span class="built_in">begin</span>(),student_id.<span class="built_in">end</span>(),[&amp;](<span class="type">int</span> a,<span class="type">int</span> b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[a] == hash[b])<span class="keyword">return</span> a &lt; b;</span><br><span class="line">            <span class="keyword">return</span> hash[a] &gt; hash[b];</span><br><span class="line">        &#125;);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;i++)ans.<span class="built_in">push_back</span>(student_id[i]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Go语言自带切片函数，用起来要方便很多。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">topStudents</span><span class="params">(positive_feedback []<span class="type">string</span>, negative_feedback []<span class="type">string</span>, report []<span class="type">string</span>, student_id []<span class="type">int</span>, k <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    score := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _,w := <span class="keyword">range</span> positive_feedback&#123;</span><br><span class="line">        score[w] = <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _,w := <span class="keyword">range</span> negative_feedback&#123;</span><br><span class="line">        score[w] = <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">type</span> pair <span class="keyword">struct</span>&#123;score,id <span class="type">int</span>&#125;</span><br><span class="line">    a := <span class="built_in">make</span>([]pair,<span class="built_in">len</span>(report))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i,r := <span class="keyword">range</span> report&#123;</span><br><span class="line">        s := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _, w := <span class="keyword">range</span> strings.Split(r, <span class="string">&quot; &quot;</span>) &#123;</span><br><span class="line">s += score[w]</span><br><span class="line">&#125;</span><br><span class="line">        a[i] = pair&#123;s,student_id[i]&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort.Slice(a, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">a, b := a[i], a[j]</span><br><span class="line"><span class="keyword">return</span> a.score &gt; b.score || a.score == b.score &amp;&amp; a.id &lt; b.id</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    ans := <span class="built_in">make</span>([]<span class="type">int</span>, k)</span><br><span class="line"><span class="keyword">for</span> i, p := <span class="keyword">range</span> a[:k] &#123;</span><br><span class="line">ans[i] = p.id</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近两天碰到几道字符串题目，总结记录一下通用的方法，C++要自己写切片函数搞字符串还是有点麻烦，python或者go会更方便一点。&lt;/p&gt;</summary>
    
    
    
    <category term="algorithm" scheme="http://dyang.com.cn/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="http://dyang.com.cn/tags/algorithm/"/>
    
    <category term="string" scheme="http://dyang.com.cn/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.828课程之Lab1</title>
    <link href="http://dyang.com.cn/2023/01/10/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8BLab1/"/>
    <id>http://dyang.com.cn/2023/01/10/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8BLab1/</id>
    <published>2023-01-10T13:57:20.000Z</published>
    <updated>2023-01-17T13:49:47.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>lab1主要分为三个部分，第一部分热身运动，便于熟悉汇编、QEMU及PC的开机引导，第二部分检查内核的boot loader程序，第三部分研究内核的初始模板即JOS。<br>实验地址：<a href="https://pdos.csail.mit.edu/6.828/2018/labs/lab1/">https://pdos.csail.mit.edu/6.828/2018/labs/lab1/</a></p><h2 id="起始配置"><a href="#起始配置" class="headerlink" title="起始配置"></a>起始配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> ~/6.828</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ~/6.828</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">add git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://pdos.csail.mit.edu/6.828/2018/jos.git lab</span></span><br></pre></td></tr></table></figure><span id="more"></span>  <h2 id="Part-Ⅰ-PC-Bootstrap"><a href="#Part-Ⅰ-PC-Bootstrap" class="headerlink" title="Part Ⅰ:PC Bootstrap"></a>Part Ⅰ:PC Bootstrap</h2><p>熟悉下汇编指令及启动x86<br>执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> lab</span><br><span class="line"><span class="variable">$</span> make</span><br></pre></td></tr></table></figure><p><img src="/2023/01/10/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8BLab1/1.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make qemu  <span class="regexp">//</span>or</span><br><span class="line">$ make qemu-nox <span class="regexp">//</span>没有图形界面的</span><br></pre></td></tr></table></figure><p><img src="/2023/01/10/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8BLab1/2.png"></p><h3 id="PC-物理地址空间"><a href="#PC-物理地址空间" class="headerlink" title="PC 物理地址空间"></a>PC 物理地址空间</h3><p>PC的物理地址空间可表示为以下布局：<br><img src="/2023/01/10/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8BLab1/3.png"><br>第一批基于16位Intel 8088处理器的PC只能寻址1MB的物理内存。因此，早期PC的物理地址空间开始于0x00000000，但结束于0x000FFFFF，而不是0xFFFFFFFF。标记为“低内存”的640KB区域是早期PC可以使用的唯一随机存取存储器(RAM)。事实上，最早的PC只能配置16KB、32KB或64KB的RAM。<br>硬件保留了从0x000A0000到0x000FFFFF的384KB区域，用于特殊用途，例如视频显示缓冲区和非易失性存储器中的固件。这个保留区域中最重要的部分是基本输入&#x2F;输出系统（BIOS），它占用从0x000F0000到0x000FFFFF的64KB区域。在早期的PC中，BIOS保存在真正的只读存储器（ROM）中，但当前的PC将BIOS存储在可更新的闪存中。BIOS负责执行基本系统初始化，例如激活视频卡和检查安装的内存量。执行此初始化后，BIOS从某个适当的位置（如软盘、硬盘、CD-ROM或网络）加载操作系统，并将机器的控制权传递给操作系统。</p><p>Exercise 2为用GDB单步指令跟踪ROM BIOS所执行的命令<br>打开两个窗口，一个窗口中执行</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>make qemu-nox-gdb</span><br></pre></td></tr></table></figure><p>另一个窗口执行</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>make gdb</span><br></pre></td></tr></table></figure><p>可以看到BIOS运行的第一条指令<br><img src="/2023/01/10/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8BLab1/4.png"><br>PC在位于为ROM BIOS保留的64KB区域的最顶部的物理地址0x000fff0开始执行。<br>PC开始执行，CS&#x3D;0xf000，IP&#x3D;0xfff0。<br>如我们前面所说，最早期的16-bit Intel 8088处理器仅支持1MB（0x00000000~0x000FFFFF）的物理寻址能力。到了80286和80386处理器，分别支持16MB和4GB的物理寻址能力。为了做到向后兼容，保留了低1MB的内存布局。为了方便管理更大的内存空间处理器需要工作在保护模式下。<br>所以现代的处理器当PC启动时CPU是运行在实模式下的，进入操作系统内核后运行在保护模式下，实模式下物理地址为16 * 0xf000 + 0xfff0 &#x3D; 0xffff0。<br>第一条指令是jmp指令，它跳转到分段地址CS&#x3D;0xf000和IP&#x3D;0xe05b，即bios的前半部分，之后从磁盘起始扇区加载512字节到物理地址0x7c00处，并用jmp指令将CS:IP设置为0x0000:0x7c00，从而进入boot loader的控制。</p><h2 id="Part-Ⅱ-The-Boot-Loader"><a href="#Part-Ⅱ-The-Boot-Loader" class="headerlink" title="Part Ⅱ The Boot Loader"></a>Part Ⅱ The Boot Loader</h2><p>PC的软盘和硬盘被划分为512字节的区域，称为扇区。扇区是磁盘的最小传输粒度：每个读或写操作的大小必须是一个或多个扇区，并与扇区边界对齐。如果磁盘是可引导的，则第一个扇区称为引导扇区，因为这是引导加载程序代码所在的位置。当BIOS找到可引导软盘或硬盘时，它将512字节的引导扇区加载到物理地址0x7c00到0x7dff的内存中，然后使用jmp指令将CS:IP设置为0000:7c00，将控制权传递给引导加载器。<br>boot loader由一个汇编文件boot.S以及main.c组成，boot loader主要完成两个功能：<br>1、将处理器从实模式切换到32位保护模式，因为只有在这种模式下，软件才能访问处理器物理地址空间中1MB以上的所有内存。<br>2、通过x86的特殊I&#x2F;O指令直接访问IDE磁盘设备寄存器，从硬盘读取内核。</p><p>Exersice 3要求我们使用GDB跟踪boot.S文件与main.c文件的运行过程。<br>于是我们仔细阅读一下boot loader的源码。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">/boot/boot.S</span><br><span class="line"><span class="comment">#include &lt;inc/mmu.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start the CPU: switch to 32-bit protected mode, jump into C.</span></span><br><span class="line"><span class="comment"># The BIOS loads this code from the first sector of the hard disk into</span></span><br><span class="line"><span class="comment"># memory at physical address 0x7c00 and starts executing in real mode</span></span><br><span class="line"><span class="comment"># with %cs=0 %ip=7c00.</span></span><br><span class="line"></span><br><span class="line">.set PROT_MODE_CSEG, <span class="number">0x8</span>         <span class="comment"># kernel code segment selector</span></span><br><span class="line">.set PROT_MODE_DSEG, <span class="number">0x10</span>        <span class="comment"># kernel data segment selector</span></span><br><span class="line">.set CR0_PE_ON,      <span class="number">0x1</span>         <span class="comment"># protected mode enable flag</span></span><br><span class="line"></span><br><span class="line">.globl start</span><br><span class="line">start:</span><br><span class="line">  .code16                     <span class="comment"># Assemble for 16-bit mode</span></span><br><span class="line">  cli                         <span class="comment"># Disable interrupts</span></span><br><span class="line">  cld                         <span class="comment"># String operations increment</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Set up the important data segment registers (DS, ES, SS).</span></span><br><span class="line">  xorw    %ax,%ax             <span class="comment"># Segment number zero</span></span><br><span class="line">  movw    %ax,%ds             <span class="comment"># -&gt; Data Segment</span></span><br><span class="line">  movw    %ax,%es             <span class="comment"># -&gt; Extra Segment</span></span><br><span class="line">  movw    %ax,%ss             <span class="comment"># -&gt; Stack Segment</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Enable A20:</span></span><br><span class="line">  <span class="comment">#   For backwards compatibility with the earliest PCs, physical</span></span><br><span class="line">  <span class="comment">#   address line 20 is tied low, so that addresses higher than</span></span><br><span class="line">  <span class="comment">#   1MB wrap around to zero by default.  This code undoes this.</span></span><br><span class="line">seta2<span class="number">0</span>.<span class="number">1</span>:</span><br><span class="line">  inb     $0x64,%al               <span class="comment"># Wait for not busy</span></span><br><span class="line">  testb   $0x2,%al</span><br><span class="line">  jnz     seta2<span class="number">0</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">  movb    $0xd1,%al               <span class="comment"># 0xd1 -&gt; port 0x64</span></span><br><span class="line">  outb    %al,$0x64</span><br><span class="line"></span><br><span class="line">seta2<span class="number">0</span>.<span class="number">2</span>:</span><br><span class="line">  inb     $0x64,%al               <span class="comment"># Wait for not busy</span></span><br><span class="line">  testb   $0x2,%al</span><br><span class="line">  jnz     seta2<span class="number">0</span>.<span class="number">2</span></span><br><span class="line"></span><br><span class="line">  movb    $0xdf,%al               <span class="comment"># 0xdf -&gt; port 0x60</span></span><br><span class="line">  outb    %al,$0x6<span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Switch from real to protected mode, using a bootstrap GDT</span></span><br><span class="line">  <span class="comment"># and segment translation that makes virtual addresses </span></span><br><span class="line">  <span class="comment"># identical to their physical addresses, so that the </span></span><br><span class="line">  <span class="comment"># effective memory map does not change during the switch.</span></span><br><span class="line">  lgdt    gdtdesc</span><br><span class="line">  movl    %cr0, %eax</span><br><span class="line">  orl     $CR0_PE_ON, %eax</span><br><span class="line">  movl    %eax, %cr0</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Jump to next instruction, but in 32-bit code segment.</span></span><br><span class="line">  <span class="comment"># Switches processor into 32-bit mode.</span></span><br><span class="line">  ljmp    $PROT_MODE_CSEG, $protcseg</span><br><span class="line"></span><br><span class="line">  .code32                     <span class="comment"># Assemble for 32-bit mode</span></span><br><span class="line">protcseg:</span><br><span class="line">  <span class="comment"># Set up the protected-mode data segment registers</span></span><br><span class="line">  movw    $PROT_MODE_DSEG, %ax    <span class="comment"># Our data segment selector</span></span><br><span class="line">  movw    %ax, %ds                <span class="comment"># -&gt; DS: Data Segment</span></span><br><span class="line">  movw    %ax, %es                <span class="comment"># -&gt; ES: Extra Segment</span></span><br><span class="line">  movw    %ax, %fs                <span class="comment"># -&gt; FS</span></span><br><span class="line">  movw    %ax, %gs                <span class="comment"># -&gt; GS</span></span><br><span class="line">  movw    %ax, %ss                <span class="comment"># -&gt; SS: Stack Segment</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Set up the stack pointer and call into C.</span></span><br><span class="line">  movl    $start, %esp</span><br><span class="line">  call bootmain</span><br><span class="line"></span><br><span class="line">  <span class="comment"># If bootmain returns (it shouldn&#x27;t), loop.</span></span><br><span class="line">spin:</span><br><span class="line">  jmp spin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bootstrap GDT</span></span><br><span class="line">.p2align <span class="number">2</span>                                <span class="comment"># force 4 byte alignment</span></span><br><span class="line">gdt:</span><br><span class="line">  SEG_NULL                              <span class="comment"># null seg</span></span><br><span class="line">  SEG(STA_X|STA_R, <span class="number">0x0</span>, <span class="number">0xffffffff</span>)     <span class="comment"># code seg</span></span><br><span class="line">  SEG(STA_W, <span class="number">0x0</span>, <span class="number">0xffffffff</span>)           <span class="comment"># data seg</span></span><br><span class="line"></span><br><span class="line">gdtdesc:</span><br><span class="line">  .word   <span class="number">0x17</span>                            <span class="comment"># sizeof(gdt) - 1</span></span><br><span class="line">  .long   gdt                             <span class="comment"># address gdt</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在最开始，先执行cli(clear interrupt)关闭所有中断，因为中断时CPU处于实模式。之后执行cld(clear direction flag)重置标志位。之后几行将段寄存器DS,ES,SS设置为0。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment"># Enable A20:</span></span><br><span class="line">  <span class="comment">#   For backwards compatibility with the earliest PCs, physical</span></span><br><span class="line">  <span class="comment">#   address line 20 is tied low, so that addresses higher than</span></span><br><span class="line">  <span class="comment">#   1MB wrap around to zero by default.  This code undoes this.</span></span><br><span class="line">seta2<span class="number">0</span>.<span class="number">1</span>:</span><br><span class="line">  inb     $0x64,%al               <span class="comment"># Wait for not busy</span></span><br><span class="line">  testb   $0x2,%al</span><br><span class="line">  jnz     seta2<span class="number">0</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">  movb    $0xd1,%al               <span class="comment"># 0xd1 -&gt; port 0x64</span></span><br><span class="line">  outb    %al,$0x64</span><br><span class="line"></span><br><span class="line">seta2<span class="number">0</span>.<span class="number">2</span>:</span><br><span class="line">  inb     $0x64,%al               <span class="comment"># Wait for not busy</span></span><br><span class="line">  testb   $0x2,%al</span><br><span class="line">  jnz     seta2<span class="number">0</span>.<span class="number">2</span></span><br><span class="line"></span><br><span class="line">  movb    $0xdf,%al               <span class="comment"># 0xdf -&gt; port 0x60</span></span><br><span class="line">  outb    %al,$0x6<span class="number">0</span></span><br></pre></td></tr></table></figure><p>为了兼容早期的PC机，A20的地址线是接地的，当物理地址超过0xFFFFF后，会默认回滚到0，所以需要我们开启默认关闭的A20，像inb，outb这些IO指令是在对外部设备进行操作。使能A20地址线后，也就开启了保护模式。<br>加载了基本的寄存器信息后会调用bootmain函数，函数定义在main.c中。</p><ul><li><p>处理器何时开始执行32位代码？是什么原因导致从16位模式切换到32位模式？<br>在boot.S文件中，计算机首先工作于实模式，此时是16bit工作模式。当运行完 ” ljmp $PROT_MODE_CSEG, $protcseg ” 语句后，正式进入32位工作模式。根本原因是此时CPU工作在保护模式下。</p></li><li><p>boot loader执行的最后一条指令是什么，它刚刚加载的内核的第一条指令是多少？<br>boot loader执行的最后一条语句是bootmain子程序中的最后一条语句 ” ((void (*)(void)) (ELFHDR-&gt;e_entry))(); “，即跳转到操作系统内核程序的起始指令处。这个第一条指令位于&#x2F;kern&#x2F;entry.S文件中，第一句 movw $0x1234, 0x472</p></li><li><p>内核的第一条指令在哪里？<br>第一条指令位于&#x2F;kern&#x2F;entry.S文件中。</p></li><li><p>boot loader如何决定必须读取多少扇区才能从磁盘中获取整个内核？它在哪里找到这些信息？<br>首先关于操作系统一共有多少个段，每个段又有多少个扇区的信息位于操作系统文件中的Program Header Table中。这个表中的每个表项分别对应操作系统的一个段。并且每个表项的内容包括这个段的大小，段起始地址偏移等等信息。所以如果我们能够找到这个表，那么就能够通过表项所提供的信息来确定内核占用多少个扇区。</p></li></ul><h3 id="Loading-the-Kernel"><a href="#Loading-the-Kernel" class="headerlink" title="Loading the Kernel"></a>Loading the Kernel</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/boot/main.c</span><br><span class="line">void</span><br><span class="line">bootmain(void)</span><br><span class="line">&#123;</span><br><span class="line">        struct Proghdr *ph, *eph;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// read 1st page off disk</span></span><br><span class="line">        readseg((uint32_t) ELFHDR, SECTSIZE*<span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// is this a valid ELF?</span></span><br><span class="line">        <span class="function"><span class="title">if</span> (ELFHDR-&gt;</span>e_magic != ELF_MAGIC)</span><br><span class="line">                goto bad;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// load each program segment (ignores ph flags)</span></span><br><span class="line">        <span class="function"><span class="title">ph</span> = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR-&gt;</span>e_phoff);</span><br><span class="line">        <span class="function"><span class="title">eph</span> = ph + ELFHDR-&gt;</span>e_phnum;</span><br><span class="line">        <span class="keyword">for</span> (; ph &lt; eph; ph++)</span><br><span class="line">                <span class="comment">// p_pa is the load address of this segment (as well</span></span><br><span class="line">                <span class="comment">// as the physical address)</span></span><br><span class="line">                <span class="function"><span class="title">readseg</span>(ph-&gt;</span><span class="function"><span class="title">p_pa</span>, ph-&gt;</span><span class="function"><span class="title">p_memsz</span>, ph-&gt;</span>p_offset);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// call the entry point from the ELF header</span></span><br><span class="line">        <span class="comment">// note: does not return!</span></span><br><span class="line">        ((<span class="function"><span class="title">void</span> (*)(void)) (ELFHDR-&gt;</span>e_entry))();</span><br><span class="line"></span><br><span class="line">bad:</span><br><span class="line">        outw(<span class="number">0</span>x8A00, <span class="number">0</span>x8A00);</span><br><span class="line">        outw(<span class="number">0</span>x8A00, <span class="number">0</span>x8E00);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">                <span class="comment">/* do nothing */</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中void readseg(uint32_t pa, uint32_t count, uint32_t offset)函数从磁盘offset字节(offset相对于第一个扇区第一个字节开始算)对应的扇区开始读取count字节到物理内存pa处。首先读取第一个扇区的SECTSIZE*8（一页）字节的内核文件（ELF格式）到物理内存ELFHDR（0x10000）处。<br>接下来检查ELF文件的头部信息，如果这个文件是格式是ELF格式的话，文件的elf-&gt;magic域应该是ELF_MAGIC的。<br>之后从ELF文件头读取ELF Header的e_phoff和e_phnum字段，分别表示Segment结构在ELF文件中的偏移，和项数。然后将每一个Segment从ph-&gt;p_offset对应的扇区读到物理内存ph-&gt;p_pa处。将内核ELF文件中的Segment从磁盘全部读取到内存后，跳转到ELFHDR-&gt;e_entry指向的指令处。正式进入内核代码中。  </p><h2 id="Part-Ⅲ-The-Kernel"><a href="#Part-Ⅲ-The-Kernel" class="headerlink" title="Part Ⅲ The Kernel"></a>Part Ⅲ The Kernel</h2><p>开始更详细的研究JOS内核</p><h3 id="Using-virtual-memory-to-work-around-position-dependence"><a href="#Using-virtual-memory-to-work-around-position-dependence" class="headerlink" title="Using virtual memory to work around position dependence"></a>Using virtual memory to work around position dependence</h3><p>操作系统内核通常在非常高的虚拟地址链接和运行（例如0xf0100000），为了离开处理器虚拟地址空间的下半部分供用户程序使用。<br>许多计算机在地址 0xf0100000 处没有任何物理内存，所以我们不能指望能够在那里存储内核。相反，我们将使用处理器的内存管理硬件映射虚拟地址0xf0100000（内核代码预期运行的链接地址）到物理地址0x00100000（boot loader将内核加载到物理内存中）。</p><h3 id="Formatted-Printing-to-the-Console"><a href="#Formatted-Printing-to-the-Console" class="headerlink" title="Formatted Printing to the Console"></a>Formatted Printing to the Console</h3>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;lab1主要分为三个部分，第一部分热身运动，便于熟悉汇编、QEMU及PC的开机引导，第二部分检查内核的boot loader程序，第三部分研究内核的初始模板即JOS。&lt;br&gt;实验地址：&lt;a href=&quot;https://pdos.csail.mit.edu/6.828/2018/labs/lab1/&quot;&gt;https://pdos.csail.mit.edu/6.828/2018/labs/lab1/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;起始配置&quot;&gt;&lt;a href=&quot;#起始配置&quot; class=&quot;headerlink&quot; title=&quot;起始配置&quot;&gt;&lt;/a&gt;起始配置&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;mkdir&lt;/span&gt; ~/6.828&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/6.828&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;add git&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://pdos.csail.mit.edu/6.828/2018/jos.git lab&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="MIT6.828" scheme="http://dyang.com.cn/categories/MIT6-828/"/>
    
    
    <category term="OS" scheme="http://dyang.com.cn/tags/OS/"/>
    
    <category term="操作系统" scheme="http://dyang.com.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="MIT6.828" scheme="http://dyang.com.cn/tags/MIT6-828/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.828课程之环境搭建</title>
    <link href="http://dyang.com.cn/2023/01/03/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://dyang.com.cn/2023/01/03/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2023-01-03T07:56:17.000Z</published>
    <updated>2023-01-03T13:30:09.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>6.828：Operating System Engineering</strong><br>操作系统课程实验环境配置教程<br>课程地址：<a href="https://pdos.csail.mit.edu/6.828/2018/schedule.html">https://pdos.csail.mit.edu/6.828/2018/schedule.html</a><br>按照labs-&gt;tools中教程进行配置即可，不过用到的很多文件及依赖已经被淘汰了，可能会有一些报错，可参考本文中的解决方法。<br>实验环境选用VMware即可，博主用的腾讯云轻量应用服务器<br>操作系统：Ubuntu Server 20.04 LTS 64bit <span id="more"></span> </p><h2 id="Compiler-Toolchain"><a href="#Compiler-Toolchain" class="headerlink" title="Compiler Toolchain"></a>Compiler Toolchain</h2><h3 id="Test-Toolchain"><a href="#Test-Toolchain" class="headerlink" title="Test Toolchain"></a>Test Toolchain</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> objdump -i    <span class="comment">//  second line says elf32-i386</span></span><br></pre></td></tr></table></figure><p><img src="/2023/01/03/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.png">  </p><p>测试gcc</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -m32 -<span class="built_in">print</span>-libgcc-<span class="keyword">file</span>-<span class="keyword">name</span> </span><br></pre></td></tr></table></figure><p>成功则显示<br><img src="/2023/01/03/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2.png"></p><p>腾讯云搭载了部分基础的应用及依赖，虚拟机新系统可能没有，可运行以下指令安装。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> apt-<span class="built_in">get</span> install -y build-essential gdb git vim</span><br><span class="line"><span class="variable">$sudo</span> apt-<span class="built_in">get</span> install gcc-multilib</span><br></pre></td></tr></table></figure><h3 id="Build-Toolchain"><a href="#Build-Toolchain" class="headerlink" title="Build Toolchain"></a>Build Toolchain</h3><h4 id="Download-Package"><a href="#Download-Package" class="headerlink" title="Download Package"></a>Download Package</h4><p>官方网站的gmp下载链接可能无法访问，按以下链接下载即可。</p><ul><li><a href="https://mirrors.sjtug.sjtu.edu.cn/gnu/gmp/gmp-5.0.2.tar.bz2">https://mirrors.sjtug.sjtu.edu.cn/gnu/gmp/gmp-5.0.2.tar.bz2</a></li><li><a href="https://www.mpfr.org/mpfr-3.1.2/mpfr-3.1.2.tar.bz2">https://www.mpfr.org/mpfr-3.1.2/mpfr-3.1.2.tar.bz2</a></li><li><a href="http://www.multiprecision.org/downloads/mpc-0.9.tar.gz">http://www.multiprecision.org/downloads/mpc-0.9.tar.gz</a></li><li><a href="http://ftpmirror.gnu.org/binutils/binutils-2.21.1.tar.bz2">http://ftpmirror.gnu.org/binutils/binutils-2.21.1.tar.bz2</a></li><li><a href="http://ftpmirror.gnu.org/gcc/gcc-4.6.4/gcc-core-4.6.4.tar.bz2">http://ftpmirror.gnu.org/gcc/gcc-4.6.4/gcc-core-4.6.4.tar.bz2</a></li><li><a href="http://ftpmirror.gnu.org/gdb/gdb-7.3.1.tar.bz2">http://ftpmirror.gnu.org/gdb/gdb-7.3.1.tar.bz2</a></li></ul><p><img src="/2023/01/03/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.png"></p><h4 id="Unpack-and-Build"><a href="#Unpack-and-Build" class="headerlink" title="Unpack and Build"></a>Unpack and Build</h4><h5 id="Install-gmp-5-0-2"><a href="#Install-gmp-5-0-2" class="headerlink" title="Install gmp-5.0.2"></a>Install gmp-5.0.2</h5><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">$tar</span> xjf gmp-5.0.2.tar.bz2</span></span><br><span class="line"><span class="meta"><span class="keyword">$cd</span> gmp-5.0.2</span></span><br><span class="line"><span class="symbol">$</span>./configure --prefix=/usr/local</span><br><span class="line"><span class="meta"><span class="keyword">$make</span></span></span><br><span class="line"><span class="meta"><span class="keyword">$sudo</span> make install             </span></span><br><span class="line"><span class="meta"><span class="keyword">$cd</span> ..</span></span><br></pre></td></tr></table></figure><p>若第三条指令显示No usable m4 in $PATH or &#x2F;usr&#x2F;5bin是缺失库文件，执行以下指令再重新执行第三条指令。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">$sudo</span> apt install m4</span></span><br></pre></td></tr></table></figure><h5 id="Install-mpfr-3-1-2"><a href="#Install-mpfr-3-1-2" class="headerlink" title="Install mpfr-3.1.2"></a>Install mpfr-3.1.2</h5><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">$tar</span> xjf mpfr-3.1.2.tar.bz2</span></span><br><span class="line"><span class="meta"><span class="keyword">$cd</span> mpfr-3.1.2</span></span><br><span class="line"><span class="symbol">$</span>./configure --prefix=/usr/local</span><br><span class="line"><span class="meta"><span class="keyword">$make</span></span></span><br><span class="line"><span class="meta"><span class="keyword">$sudo</span> make install           </span></span><br><span class="line"><span class="meta"><span class="keyword">$cd</span> ..</span></span><br></pre></td></tr></table></figure><h5 id="Install-mpc-0-9"><a href="#Install-mpc-0-9" class="headerlink" title="Install mpc-0.9"></a>Install mpc-0.9</h5><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">$tar</span> xzf mpc-0.9.tar.gz</span></span><br><span class="line"><span class="meta"><span class="keyword">$cd</span> mpc-0.9</span></span><br><span class="line"><span class="symbol">$</span>./configure --prefix=/usr/local</span><br><span class="line"><span class="meta"><span class="keyword">$make</span></span></span><br><span class="line"><span class="meta"><span class="keyword">$sudo</span> make install            </span></span><br><span class="line"><span class="meta"><span class="keyword">$cd</span> ..</span></span><br></pre></td></tr></table></figure><h5 id="Install-binutils-2-21-1"><a href="#Install-binutils-2-21-1" class="headerlink" title="Install binutils-2.21.1"></a>Install binutils-2.21.1</h5><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">$tar</span> xjf binutils-2.21.1.tar.bz2</span></span><br><span class="line"><span class="meta"><span class="keyword">$cd</span> binutils-2.21.1</span></span><br><span class="line"><span class="symbol">$</span>./configure --prefix=/usr/local --target=i386-jos-elf --disable-werror</span><br><span class="line"><span class="meta"><span class="keyword">$make</span></span></span><br><span class="line"><span class="meta"><span class="keyword">$sudo</span> make install             </span></span><br><span class="line"><span class="meta"><span class="keyword">$cd</span> ..</span></span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">$i386</span>-jos-elf-objdump -i</span></span><br></pre></td></tr></table></figure><p>安装成功则输出以下信息<br><img src="/2023/01/03/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.png"></p><h5 id="Install-gcc-core-4-6-4"><a href="#Install-gcc-core-4-6-4" class="headerlink" title="Install gcc-core-4.6.4"></a>Install gcc-core-4.6.4</h5><p>gcc需要单独的目录否则编译不成功</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$tar</span> xjf gcc-core-<span class="number">4.6</span>.<span class="number">4</span><span class="selector-class">.tar</span><span class="selector-class">.bz2</span></span><br><span class="line"><span class="variable">$cd</span> gcc-<span class="number">4.6</span>.<span class="number">4</span></span><br><span class="line"><span class="variable">$mkdir</span> build           </span><br><span class="line"><span class="variable">$cd</span> build</span><br><span class="line">$../configure <span class="attr">--prefix</span>=/usr/local \</span><br><span class="line">    <span class="attr">--target</span>=i386-jos-elf <span class="attr">--disable-werror</span> \</span><br><span class="line">    <span class="attr">--disable-libssp</span> <span class="attr">--disable-libmudflap</span> <span class="attr">--with-newlib</span> \</span><br><span class="line">    <span class="attr">--without-headers</span> <span class="attr">--enable-languages</span>=c MAKEINFO=missing</span><br><span class="line"><span class="variable">$make</span> <span class="attribute">all</span>-gcc</span><br><span class="line"><span class="variable">$sudo</span> make install-gcc         </span><br><span class="line"><span class="variable">$make</span> <span class="attribute">all</span>-target-libgcc</span><br><span class="line"><span class="variable">$sudo</span> make install-target-libgcc   </span><br><span class="line"><span class="variable">$cd</span> ../..</span><br></pre></td></tr></table></figure><p>若第八条指令报错configure-target-libgcc<br><img src="/2023/01/03/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/5.png"><br>则执行以下命令后重新执行第八条指令</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$export</span> <span class="title class_">LD_LIBRARY_PATH</span>=<span class="variable">$LD_LIBRARY_PATH</span><span class="symbol">:/usr/local/lib</span> </span><br></pre></td></tr></table></figure><p>测试安装结果</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">$i386</span>-jos-elf-gcc -v</span></span><br></pre></td></tr></table></figure><p>成功后输出以下信息<br><img src="/2023/01/03/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/6.png">  </p><h5 id="Install-gdb-7-3-1"><a href="#Install-gdb-7-3-1" class="headerlink" title="Install gdb-7.3.1"></a>Install gdb-7.3.1</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$tar</span> xjf gdb-<span class="number">7.3</span>.<span class="number">1</span><span class="selector-class">.tar</span><span class="selector-class">.bz2</span></span><br><span class="line"><span class="variable">$cd</span> gdb-<span class="number">7.3</span>.<span class="number">1</span></span><br><span class="line">$./configure <span class="attr">--prefix</span>=/usr/local <span class="attr">--target</span>=i386-jos-elf <span class="attr">--program-prefix</span>=i386-jos-elf- \</span><br><span class="line">    <span class="attr">--disable-werror</span></span><br><span class="line"><span class="variable">$make</span> <span class="attribute">all</span> </span><br><span class="line"><span class="variable">$sudo</span> make install         </span><br><span class="line"><span class="variable">$cd</span> ..</span><br></pre></td></tr></table></figure><p>若第四条指令报错no termcap library found，缺少库文件，执行以下指令安装termcap后重新执行。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">$wget</span> http://ftp.gnu.org/gnu/termcap/termcap-1.3.1.tar.gz</span></span><br><span class="line"><span class="meta"><span class="keyword">$tar</span> -zxv -f termcap-1.3.1.tar.gz</span></span><br><span class="line"><span class="meta"><span class="keyword">$cd</span> termcap-1.3.1</span></span><br><span class="line"><span class="symbol">$</span> ./configure </span><br><span class="line"><span class="meta"><span class="keyword">$make</span></span></span><br><span class="line"><span class="meta"><span class="keyword">$sudo</span> make install</span></span><br></pre></td></tr></table></figure><h2 id="QEMU"><a href="#QEMU" class="headerlink" title="QEMU"></a>QEMU</h2><p>QEMU是一种现代且快速的 PC 模拟器，828课程要求该课程定制的QEMU版本。<br>直接用官方教程中的指令可能会报错，可以尝试更换python版本。</p><h3 id="Install-Tools"><a href="#Install-Tools" class="headerlink" title="Install Tools"></a>Install Tools</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">$sudo</span> apt install libsdl1.2-dev libtool-bin libglib2.0-dev  libz-dev  libpixman-1-dev</span></span><br><span class="line"><span class="meta"><span class="keyword">$sudo</span> apt install python2</span></span><br></pre></td></tr></table></figure><p>若执行第一条指令后发现apt,git等指令无法正常使用，报错undefined symbol: __gmpz_limbs_write，则执行以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">cd</span> /usr/local/lib</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">sudo <span class="built_in">rm</span> libgmp*</span></span><br></pre></td></tr></table></figure><h3 id="Install-QEMU"><a href="#Install-QEMU" class="headerlink" title="Install QEMU"></a>Install QEMU</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/mit-pdos/</span><span class="number">6.828</span>-qemu.git qemu</span><br><span class="line">$.<span class="regexp">/configure --disable-kvm --disable-werror --prefix=/u</span>sr/local  --target-list=<span class="string">&quot;i386-softmmu x86_64-softmmu&quot;</span> --python=python2</span><br><span class="line"><span class="variable">$make</span></span><br><span class="line"><span class="variable">$sudo</span> make install</span><br></pre></td></tr></table></figure><p>遇到报错如下：<br><img src="/2023/01/03/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/7.png"><br>解决方法：在 qga&#x2F;commands-posix.c文件中的 #include &lt;sys&#x2F;types.h&gt; 下面增加#include &lt;sys&#x2F;sysmacros.h&gt;</p><h3 id="Test-QEMU"><a href="#Test-QEMU" class="headerlink" title="Test QEMU"></a>Test QEMU</h3><p>下载实验源码进行测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> clone https:<span class="regexp">//</span>pdos.csail.mit.edu<span class="regexp">/6.828/</span><span class="number">2018</span>/jos.git lab</span><br><span class="line"><span class="variable">$cd</span> lab</span><br><span class="line"><span class="variable">$make</span></span><br><span class="line"><span class="variable">$make</span> qemu-nox</span><br></pre></td></tr></table></figure><p>测试成功界面<br><img src="/2023/01/03/MIT6-828%E8%AF%BE%E7%A8%8B%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/8.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;6.828：Operating System Engineering&lt;/strong&gt;&lt;br&gt;操作系统课程实验环境配置教程&lt;br&gt;课程地址：&lt;a href=&quot;https://pdos.csail.mit.edu/6.828/2018/schedule.html&quot;&gt;https://pdos.csail.mit.edu/6.828/2018/schedule.html&lt;/a&gt;&lt;br&gt;按照labs-&amp;gt;tools中教程进行配置即可，不过用到的很多文件及依赖已经被淘汰了，可能会有一些报错，可参考本文中的解决方法。&lt;br&gt;实验环境选用VMware即可，博主用的腾讯云轻量应用服务器&lt;br&gt;操作系统：Ubuntu Server 20.04 LTS 64bit&lt;/p&gt;</summary>
    
    
    
    <category term="MIT6.828" scheme="http://dyang.com.cn/categories/MIT6-828/"/>
    
    
    <category term="OS" scheme="http://dyang.com.cn/tags/OS/"/>
    
    <category term="操作系统" scheme="http://dyang.com.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="MIT6.828" scheme="http://dyang.com.cn/tags/MIT6-828/"/>
    
  </entry>
  
  <entry>
    <title>DFS剪枝与优化</title>
    <link href="http://dyang.com.cn/2023/01/02/DFS%E5%89%AA%E6%9E%9D%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <id>http://dyang.com.cn/2023/01/02/DFS%E5%89%AA%E6%9E%9D%E4%B8%8E%E4%BC%98%E5%8C%96/</id>
    <published>2023-01-02T13:13:52.000Z</published>
    <updated>2023-01-03T07:59:13.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无论在深搜还是宽搜当中，我们都需要对所有的情况进行暴力枚举，要降低我们在深度优先搜索时的时间开销，剪枝优化至关重要。在具体的题目中，我们可以考虑的剪枝方法主要有以下五个方向：<br>1.优化搜索顺序：不同的搜索顺序会产生不同的搜索树规模，在大部分情况下，应当优先搜索分支较少的节点。<br>2.排除等效冗余：有些结果是数据的组合而无需考虑组内顺序，这时我们需要控制不去搜索重复状态，排除冗余。<br>3.可行性剪枝：在搜索的过程当中对当前的状态随时进行检查，发现当前分支已无法到达递归边界或已无法满足结果要求可直接回溯。<br>4.最优性剪枝：当我们发现当前分支无论数和都比最优解要差时，可提前退出。<br>5.记忆化搜索：我们可以记录每一个状态的搜索结果，当重复遍历时可以直接返回。<span id="more"></span>  </p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p><strong>ACwing 165</strong><br>链接：<a href="https://www.acwing.com/problem/content/167/">https://www.acwing.com/problem/content/167/</a><br>翰翰和达达饲养了 N 只小猫，这天，小猫们要去爬山。<br>经历了千辛万苦，小猫们终于爬上了山顶，但是疲倦的它们再也不想徒步走下山了（呜咕&gt;_&lt;）。<br>翰翰和达达只好花钱让它们坐索道下山。<br>索道上的缆车最大承重量为 W，而 N 只小猫的重量分别是 C1、C2……CN。<br>当然，每辆缆车上的小猫的重量之和不能超过 W。<br>每租用一辆缆车，翰翰和达达就要付 1 美元，所以他们想知道，最少需要付多少美元才能把这 N 只小猫都运送下山。<br><strong>输入格式</strong><br>第 1 行：包含两个用空格隔开的整数，N 和 W。<br>第 2..N+1 行：每行一个整数，其中第 i+1 行的整数表示第 i 只小猫的重量 Ci。<br><strong>输出格式</strong><br>输出一个整数，表示最少需要多少美元，也就是最少需要多少辆缆车。<br><strong>数据范围</strong><br>1≤N≤18,<br>1≤Ci≤W≤108  </p><p>可通过该问题体会一下几种剪枝的方法。<br>在DFS问题中我们首先考虑搜索顺序再思考其他的剪枝方法，要使未来的搜索分支较少，我们应当优先枚举较大的重量，其次对每辆缆车所需重量之和进行可行性剪枝，同时我们注意到本题要求最优解，所以可以记录当前的最优结果，当搜索分支已经超过最优解时直接跳出,在考虑好剪枝方法后，我们只需打板并注意回溯即可，非常简单。  </p><p><strong>完整代码如下</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"><span class="type">int</span> ans = N;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="comment">//最优性剪枝</span></span><br><span class="line">    <span class="keyword">if</span>(k &gt;= ans)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(u == n)&#123;</span><br><span class="line">        ans = k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] + w[u] &lt;= m)&#123; <span class="comment">//可行性剪枝</span></span><br><span class="line">            s[i] += w[u];</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>,k);</span><br><span class="line">            s[i] -= w[u]; <span class="comment">//恢复现场</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    s[k] = w[u];</span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>,k + <span class="number">1</span>);</span><br><span class="line">    s[k] = <span class="number">0</span>; <span class="comment">//恢复现场</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)cin&gt;&gt;w[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//优化搜索顺序</span></span><br><span class="line">    <span class="built_in">sort</span>(w,w + n,cmp);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数独问题"><a href="#数独问题" class="headerlink" title="数独问题"></a>数独问题</h2><p>比较经典的DFS例题<br>数独是一种传统益智游戏，你需要把一个 9×9 的数独补充完整，使得数独中每行、每列、每个 3×3 的九宫格内数字 1∼9 均恰好出现一次。<br>请编写一个程序填写数独。<br><strong>输入格式</strong><br>输入包含多组测试用例。<br>每个测试用例占一行，包含 81 个字符，代表数独的 81 个格内数据（顺序总体由上到下，同行由左到右）。<br>每个字符都是一个数字（1−9）或一个 .（表示尚未填充）。<br>您可以假设输入中的每个谜题都只有一个解决方案。<br>文件结尾处为包含单词 end 的单行，表示输入结束。<br><strong>输出格式</strong><br>每个测试用例，输出一行数据，代表填充完全后的数独。  </p><p>相应链接：<br><a href="http://poj.org/problem?id=3074">http://poj.org/problem?id=3074</a><br><a href="https://www.acwing.com/problem/content/168/">https://www.acwing.com/problem/content/168/</a><br><a href="https://leetcode.cn/problems/sudoku-solver/">https://leetcode.cn/problems/sudoku-solver/</a>   </p><p>这道题目中没有太多的剪枝方法，但是可以用位运算进行优化，主要考虑搜索顺序、可行性及位运算优化。对于每一行列及九宫格中，可用一个9位二进制数来记录当前行、列、九宫格的状态，某一位为1时代表该位已被填上数字，在判断某位置是否可以填数时，我们将行、列及九宫格的状态求与，即可判断可否填数。<br>求二进制表示中的1可用lowbit函数来求解，代表当前数二进制表示中最低位的值。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">define</span> lowbit(<span class="keyword">x</span>) (<span class="keyword">x</span> &amp; -<span class="keyword">x</span>)</span><br></pre></td></tr></table></figure><p>也可直接使用__builtin_popcount()函数来实现，__builtin_popcount属于GCC提供的指令，也是通过打表实现，时间复杂度O(1)。<br>手动打表则定义ones[],map[]数组分别表示0-2^9中各个状态有多少个1、当前数为2的多少次方。<br>为优化搜索顺序，我们从空格数最少的状态开始搜索。<br>另外注意当前代码目前会卡常数TLE，需要开O2优化。</p><p><strong>完整代码如下</strong>  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">9</span>,M = <span class="number">1</span> &lt;&lt; N; </span><br><span class="line"><span class="type">int</span> ones[M],map[M]; <span class="comment">//map表示的是2的次方 map[logn]=i,ones表示0-2^9中的数中每个状态有多少个1</span></span><br><span class="line"><span class="type">int</span> row[N],col[N],cell[<span class="number">3</span>][<span class="number">3</span>]; <span class="comment">//各行列九宫格状态</span></span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span>  <span class="comment">// 返回末尾的1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> row[x] &amp; col[y] &amp; cell[x / <span class="number">3</span>][y / <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;  <span class="comment">//初始状态 行列9宫格没有填</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">        row[i] = col[i] = (<span class="number">1</span> &lt;&lt; N) - <span class="number">1</span>; <span class="comment">//2^9 - 1种状态</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; <span class="number">3</span>;j++)&#123;</span><br><span class="line">            cell[i][j] = (<span class="number">1</span> &lt;&lt; N) - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> t,<span class="type">bool</span> is_set)</span></span>&#123;   <span class="comment">//辅助函数 填数或删数 通过is_set进行判断</span></span><br><span class="line">    <span class="keyword">if</span>(is_set)s[x * N + y] = <span class="string">&#x27;1&#x27;</span> + t;</span><br><span class="line">    <span class="keyword">else</span> s[x * N + y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> v = <span class="number">1</span> &lt;&lt; t;</span><br><span class="line">    <span class="keyword">if</span>(!is_set)v = -v;</span><br><span class="line">    </span><br><span class="line">    row[x] -= v;</span><br><span class="line">    col[y] -= v;</span><br><span class="line">    cell[x / <span class="number">3</span>][y / <span class="number">3</span>] -= v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!cnt)<span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//填满所有空格时结束</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> minv = <span class="number">10</span>;  <span class="comment">//最多可以填10个数</span></span><br><span class="line">    <span class="type">int</span> x,y; <span class="comment">//循环完后x y存储的就是分支数量最少的格子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; N;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i * N + j] == <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                <span class="type">int</span> state = <span class="built_in">get</span>(i,j);</span><br><span class="line">                <span class="keyword">if</span>(ones[state] &lt; minv)&#123;</span><br><span class="line">                    minv = ones[state];</span><br><span class="line">                    x = i,y = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> state = <span class="built_in">get</span>(x,y);  <span class="comment">//从当前位置开始搜索</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = state; i ;i -= <span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        <span class="type">int</span> t = map[<span class="built_in">lowbit</span>(i)];   <span class="comment">//从表中取数</span></span><br><span class="line">        <span class="built_in">draw</span>(x,y,t,<span class="literal">true</span>);           </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dfs</span>(cnt - <span class="number">1</span>))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">draw</span>(x,y,t,<span class="literal">false</span>);        <span class="comment">//回溯后恢复现场</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; N;i++)map[<span class="number">1</span> &lt;&lt; i] = i; <span class="comment">//打表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">1</span> &lt;&lt; N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; N;j++)&#123;</span><br><span class="line">            ones[i] += i &gt;&gt; j &amp; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s,s[<span class="number">0</span>] != <span class="string">&#x27;e&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;<span class="comment">//空格的数目  </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,k = <span class="number">0</span>;i &lt; N;i++)&#123;   <span class="comment">//输入数独并统计空格数目</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; N;j++,k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[k] != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> t = s[k] - <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                    <span class="built_in">draw</span>(i,j,t,<span class="literal">true</span>);     </span><br><span class="line">                &#125;<span class="keyword">else</span> cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">dfs</span>(cnt);</span><br><span class="line">        <span class="built_in">puts</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展练习"><a href="#扩展练习" class="headerlink" title="扩展练习"></a>扩展练习</h2><p><strong>sticks</strong><br>乔治拿来一组等长的木棒，将它们随机地砍断，使得每一节木棍的长度都不超过 50 个长度单位。<br>然后他又想把这些木棍恢复到为裁截前的状态，但忘记了初始时有多少木棒以及木棒的初始长度。<br>请你设计一个程序，帮助乔治计算木棒的可能最小长度。<br>每一节木棍的长度都用大于零的整数表示。<br><strong>输入格式</strong><br>输入包含多组数据，每组数据包括两行。<br>第一行是一个不超过 64 的整数，表示砍断之后共有多少节木棍。<br>第二行是截断以后，所得到的各节木棍的长度。<br>在最后一组数据之后，是一个零。<br><strong>输出格式</strong><br>为每组数据，分别输出原始木棒的可能最小长度，每组数据占一行。<br><strong>数据范围</strong><br>数据保证每一节木棍的长度均不大于 50。<br>本题链接：<a href="https://vjudge.net/problem/UVA-307">https://vjudge.net/problem/UVA-307</a><br>首先考虑搜索顺序，为使未来分支较少，我们优先枚举长度较大的木棍。<br>其次，枚举木棒的长度时，长度length要被所有木棍的总长度sum整除才能符合题意。<br>比较细节的是等效冗余的考虑，主要有以下四个方面：<br>1.组内顺序不影响结果，可以不用重复搜索<br>2.在枚举木棍的过程中，如果当前长度的木棍加入到方案中无法满足要求，则之后的相同长度的木棍都可以跳过<br>3.如果木棒枚举第一根木棍时无法满足要求，则可直接跳过，一定无法满足要求<br>4.同3，如果木棒枚举最后一根木棍时无法满足要求，则可直接跳过<br>可通过反证法证明3.4<br><strong>完整代码如下</strong>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">70</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> sum,length;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> cur,<span class="type">int</span> start)</span></span>&#123;  <span class="comment">//当前组，当前组长度，当前组枚举到的位置</span></span><br><span class="line">    <span class="keyword">if</span>(u * length == sum)<span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//总长度达到，返回结果</span></span><br><span class="line">    <span class="keyword">if</span>(cur == length)<span class="keyword">return</span> <span class="built_in">dfs</span>(u + <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>); <span class="comment">//枚举下一组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = start;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st[i] || cur + w[i] &gt; length)<span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        st[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dfs</span>(u,cur + w[i],i + <span class="number">1</span>))<span class="keyword">return</span> <span class="literal">true</span>;   <span class="comment">//枚举下一根木棍</span></span><br><span class="line">        st[i] = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!cur || cur + w[i] == length)<span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//3.4</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> j = i;   <span class="comment">//跳过相同长度</span></span><br><span class="line">        <span class="keyword">while</span>(j &lt; n &amp;&amp; w[j] == w[i])j++;</span><br><span class="line">        i = j - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n,n)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;w[i];</span><br><span class="line">            sum += w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">sort</span>(w,w + n,cmp);  <span class="comment">//优化搜索顺序</span></span><br><span class="line">        </span><br><span class="line">        length = <span class="number">1</span>;   <span class="comment">//外层枚举木棒长度</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum % length == <span class="number">0</span> &amp;&amp; <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))&#123;   <span class="comment">//整除要求</span></span><br><span class="line">                cout&lt;&lt;length&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;无论在深搜还是宽搜当中，我们都需要对所有的情况进行暴力枚举，要降低我们在深度优先搜索时的时间开销，剪枝优化至关重要。在具体的题目中，我们可以考虑的剪枝方法主要有以下五个方向：&lt;br&gt;1.优化搜索顺序：不同的搜索顺序会产生不同的搜索树规模，在大部分情况下，应当优先搜索分支较少的节点。&lt;br&gt;2.排除等效冗余：有些结果是数据的组合而无需考虑组内顺序，这时我们需要控制不去搜索重复状态，排除冗余。&lt;br&gt;3.可行性剪枝：在搜索的过程当中对当前的状态随时进行检查，发现当前分支已无法到达递归边界或已无法满足结果要求可直接回溯。&lt;br&gt;4.最优性剪枝：当我们发现当前分支无论数和都比最优解要差时，可提前退出。&lt;br&gt;5.记忆化搜索：我们可以记录每一个状态的搜索结果，当重复遍历时可以直接返回。&lt;/p&gt;</summary>
    
    
    
    <category term="algorithm" scheme="http://dyang.com.cn/categories/algorithm/"/>
    
    
    <category term="dfs" scheme="http://dyang.com.cn/tags/dfs/"/>
    
    <category term="algorithm" scheme="http://dyang.com.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>《Go语言编程》笔记之音乐盒demo</title>
    <link href="http://dyang.com.cn/2023/01/01/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/"/>
    <id>http://dyang.com.cn/2023/01/01/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/</id>
    <published>2023-01-01T07:50:53.000Z</published>
    <updated>2023-01-03T08:01:25.087Z</updated>
    
    <content type="html"><![CDATA[<p>本文为《Go语言编程》第三章所描述的示例实现,主要演示并总结Go语言面向对象编程特性。<br>Go语言的面向对象特性设计简洁,通过接口的设计,摒弃了继承、构造、析构、虚函数等臃肿的机制。<br>Go语言的接口并不是其他语言（C++、Java、C#等）中所提供的接口概念，在Go语言出现之前，接口主要作为不同组件之间的契约存在。对契约的实现是强制的，你必须声明你的确实现了该接口。为了实现一个接口，你需要从该接口继承所有的方法，即使另外有一个接口实现了与该接口完全一样的接口方法甚至名字也相同只不过位于不同的名字空间下，编译器也会认为上面的类只实现了该接口而没有实现定义相同的那个接口。这类接口我们称为侵入式接口。“侵入式”的主要表现在于实现类需要明确声明自己实现了某个接口。这种强制性的接口继承是面向对象编程思想发展过程中一个遭受相当多置疑的特性。<br>在Go语言中，一个类只需要实现了接口要求的所有函数，我们就说这个类实现了该接口。Go语言在接口上的调整有以下三个优点：<br>其一，Go语言的标准库，再也不需要绘制类库的继承树图。你一定见过不少C++、Java、C#类库的继承树图。在Go中，类的继承树并无意义，你只需要知道这个类实现了哪些方法，每个方法是什么含义，就足够了。<br>其二，实现类的时候，只需要关心自己应该提供哪些方法，不用再纠结接口需要拆得多细才合理。接口由使用方按需定义，而不用事前规划。<br>其三，不用为了实现一个接口而导入一个包，因为多引用一个外部的包，就意味着更多的耦合。接口由使用方按自身需求来定义，使用方无需关心是否有其他模块定义过类似的接口。<br>了解了Go语言面向对象的特性之后，可以通过一个音乐盒的小示例来深刻感受。<br>demo地址:<a href="https://github.com/Vector-DY/gostudy/tree/main/musicplayer">https://github.com/Vector-DY/gostudy/tree/main/musicplayer</a></p><span id="more"></span><p>文件结构<br><img src="/2023/01/01/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/tree.png"><br>实际效果<br><img src="/2023/01/01/%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9F%B3%E4%B9%90%E7%9B%92demo/demo.png"></p><h2 id="音乐库管理"><a href="#音乐库管理" class="headerlink" title="音乐库管理"></a>音乐库管理</h2><p>首先先来定义音乐信息的结构体</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> MusicEntry <span class="keyword">struct</span> &#123;</span><br><span class="line">Id     <span class="keyword">string</span></span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">Artist <span class="keyword">string</span></span><br><span class="line">Source <span class="keyword">string</span></span><br><span class="line"><span class="built_in">Type</span>   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后实现具体的类型方法，我们使用一个数组切片作为基础存储结构，其他<br>的操作都只是对这个数组切片的包装</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MusicManager <span class="keyword">struct</span> &#123;</span><br><span class="line">musics []MusicEntry</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMusicManager</span><span class="params">()</span></span> *MusicManager &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;MusicManager&#123;<span class="built_in">make</span>([]MusicEntry, <span class="number">0</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Len() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(m.musics)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Get(index <span class="type">int</span>) (music *MusicEntry, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">len</span>(m.musics) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;Index out of range.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;m.musics[index], <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本增删查改操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Find(name <span class="type">string</span>) *MusicEntry &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(m.musics) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, m := <span class="keyword">range</span> m.musics &#123;</span><br><span class="line"><span class="keyword">if</span> m.Name == name &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;m</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Add(music *MusicEntry) &#123;</span><br><span class="line">m.musics = <span class="built_in">append</span>(m.musics, *music)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> Remove(index <span class="type">int</span>) *MusicEntry &#123;</span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">len</span>(m.musics) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">removedMusic := &amp;m.musics[index]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="built_in">len</span>(m.musics)<span class="number">-1</span> &#123;</span><br><span class="line">m.musics = <span class="built_in">append</span>(m.musics[:index<span class="number">-1</span>], m.musics[index+<span class="number">1</span>:]...)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">m.musics = <span class="built_in">make</span>([]MusicEntry, <span class="number">0</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">m.musics = m.musics[:index<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> removedMusic</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MusicManager)</span></span> RemoveByName(name <span class="type">string</span>) *MusicEntry &#123;</span><br><span class="line">index := <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i, item := <span class="keyword">range</span> m.musics &#123;</span><br><span class="line"><span class="keyword">if</span> item.Name == name &#123;</span><br><span class="line">index = i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m.Remove(index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="音乐播放模块"><a href="#音乐播放模块" class="headerlink" title="音乐播放模块"></a>音乐播放模块</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Player interface &#123;</span><br><span class="line"><span class="constructor">Play(<span class="params">source</span> <span class="params">string</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="constructor">Play(<span class="params">source</span>, <span class="params">mtype</span> <span class="params">string</span>)</span> &#123;</span><br><span class="line">var p Player</span><br><span class="line">p.<span class="constructor">Play(<span class="params">source</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2><p>简单的小示例，自行编写main函数编译运行即可，重在理解音乐库管理中的面向对象特性。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文为《Go语言编程》第三章所描述的示例实现,主要演示并总结Go语言面向对象编程特性。&lt;br&gt;Go语言的面向对象特性设计简洁,通过接口的设计,摒弃了继承、构造、析构、虚函数等臃肿的机制。&lt;br&gt;Go语言的接口并不是其他语言（C++、Java、C#等）中所提供的接口概念，在Go语言出现之前，接口主要作为不同组件之间的契约存在。对契约的实现是强制的，你必须声明你的确实现了该接口。为了实现一个接口，你需要从该接口继承所有的方法，即使另外有一个接口实现了与该接口完全一样的接口方法甚至名字也相同只不过位于不同的名字空间下，编译器也会认为上面的类只实现了该接口而没有实现定义相同的那个接口。这类接口我们称为侵入式接口。“侵入式”的主要表现在于实现类需要明确声明自己实现了某个接口。这种强制性的接口继承是面向对象编程思想发展过程中一个遭受相当多置疑的特性。&lt;br&gt;在Go语言中，一个类只需要实现了接口要求的所有函数，我们就说这个类实现了该接口。Go语言在接口上的调整有以下三个优点：&lt;br&gt;其一，Go语言的标准库，再也不需要绘制类库的继承树图。你一定见过不少C++、Java、C#类库的继承树图。在Go中，类的继承树并无意义，你只需要知道这个类实现了哪些方法，每个方法是什么含义，就足够了。&lt;br&gt;其二，实现类的时候，只需要关心自己应该提供哪些方法，不用再纠结接口需要拆得多细才合理。接口由使用方按需定义，而不用事前规划。&lt;br&gt;其三，不用为了实现一个接口而导入一个包，因为多引用一个外部的包，就意味着更多的耦合。接口由使用方按自身需求来定义，使用方无需关心是否有其他模块定义过类似的接口。&lt;br&gt;了解了Go语言面向对象的特性之后，可以通过一个音乐盒的小示例来深刻感受。&lt;br&gt;demo地址:&lt;a href=&quot;https://github.com/Vector-DY/gostudy/tree/main/musicplayer&quot;&gt;https://github.com/Vector-DY/gostudy/tree/main/musicplayer&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="golang" scheme="http://dyang.com.cn/categories/golang/"/>
    
    
    <category term="golang" scheme="http://dyang.com.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang学习-即时通讯系统demo</title>
    <link href="http://dyang.com.cn/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/"/>
    <id>http://dyang.com.cn/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/</id>
    <published>2022-12-31T16:30:46.000Z</published>
    <updated>2023-01-03T08:01:27.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简易的即时通讯系统的模拟demo"><a href="#简易的即时通讯系统的模拟demo" class="headerlink" title="简易的即时通讯系统的模拟demo"></a>简易的即时通讯系统的模拟demo</h1><p>基本项目结构如下<br><img src="/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/tree.png"><br>项目地址： <a href="https://github.com/Vector-DY/Instant-Messaging-demo">https://github.com/Vector-DY/Instant-Messaging-demo</a></p><span id="more"></span><h2 id="server构建"><a href="#server构建" class="headerlink" title="server构建"></a>server构建</h2><p>定义基本server类型及服务器接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">Ip   <span class="type">string</span></span><br><span class="line">Port <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(ip <span class="type">string</span>, port <span class="type">int</span>)</span></span> *Server &#123;</span><br><span class="line">server := &amp;Server&#123;</span><br><span class="line">Ip:        ip,</span><br><span class="line">Port:      port,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> server</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Start() &#123;</span><br><span class="line"><span class="comment">//socket listen</span></span><br><span class="line">listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="string">&quot;%s:%d&quot;</span>, s.Ip, s.Port))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;net.Listen err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//close listen socket</span></span><br><span class="line"><span class="keyword">defer</span> listener.Close(）</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//accept</span></span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;listener accept err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///do handler</span></span><br><span class="line"><span class="keyword">go</span> s.Handler(conn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h2><h3 id="用户结构构建"><a href="#用户结构构建" class="headerlink" title="用户结构构建"></a>用户结构构建</h3><p>用户板块结构如下图所示<br>使用Map记录在线用户信息，用户上线后向服务器发出请求，服务器为每一个用户分配单独的channel传递消息<br><img src="/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/user.png"><br>用户对象及方法定义如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="keyword">User</span> <span class="title">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Addr <span class="keyword">string</span></span><br><span class="line">C    chan <span class="keyword">string</span>  </span><br><span class="line">conn net.Conn //用户属于哪一个连接</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewUser(conn net.Conn) *<span class="keyword">User</span> <span class="title">&#123;</span></span><br><span class="line"><span class="title">userAddr</span> := conn.RemoteAddr().<span class="keyword">String</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">user</span> <span class="title">:= &amp;User</span>&#123;</span><br><span class="line">Name: userAddr,</span><br><span class="line">Addr: userAddr,</span><br><span class="line">C:    make(chan <span class="keyword">string</span>),</span><br><span class="line">conn: conn,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//启动监听当前<span class="keyword">user</span> <span class="title">channel</span>消息的goroutine</span><br><span class="line">go user.ListenMessage()</span><br><span class="line"></span><br><span class="line">return <span class="keyword">user</span></span><br><span class="line"><span class="title">&#125;</span></span><br></pre></td></tr></table></figure><p>服务器端需要增添存储用户数据的数据结构及处理用户业务的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">Ip   <span class="type">string</span></span><br><span class="line">Port <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在线用户列表</span></span><br><span class="line">OnlineMap <span class="keyword">map</span>[<span class="type">string</span>]*User</span><br><span class="line">mapLock   sync.RWMutex</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息广播的channel</span></span><br><span class="line">Message <span class="keyword">chan</span> <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Handler(conn net.Conn) &#123;&#125;</span><br><span class="line"><span class="comment">//广播消息的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> BroadCast(user *User, msg <span class="type">string</span>) &#123;</span><br><span class="line">sendMsg := <span class="string">&quot;[&quot;</span> + user.Addr + <span class="string">&quot;]&quot;</span> + user.Name + <span class="string">&quot;:&quot;</span> + msg</span><br><span class="line">s.Message &lt;- sendMsg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听Message广播消息channel的goroutine,一旦有消息就发送给全部的在线User</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> ListenMessager() &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">msg := &lt;-s.Message</span><br><span class="line"></span><br><span class="line"><span class="comment">//将msg发送给全部的在线User</span></span><br><span class="line">s.mapLock.Lock()</span><br><span class="line"><span class="keyword">for</span> _, cli := <span class="keyword">range</span> s.OnlineMap &#123;</span><br><span class="line">cli.C &lt;- msg</span><br><span class="line">&#125;</span><br><span class="line">s.mapLock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务器监听程序中，可以单独开辟一个goroutine监听Message广播消息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>启动监听Message的goroutine</span><br><span class="line">go s.ListenMessager()</span><br></pre></td></tr></table></figure><h3 id="用户业务层封装"><a href="#用户业务层封装" class="headerlink" title="用户业务层封装"></a>用户业务层封装</h3><p>一些消息方法我们之前运行在了server当中,所以需要将在server中处理的用户业务封装入用户模块,降低程序的耦合性。<br>在用户对象中加入server属性,表示所关联的服务器,处理用户在服务端的业务。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">Name string</span><br><span class="line">Addr string</span><br><span class="line">C    chan string</span><br><span class="line">conn net<span class="selector-class">.Conn</span></span><br><span class="line"></span><br><span class="line">server *Server</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户的上线业务</span></span><br><span class="line">func (u *User) <span class="built_in">Online</span>() &#123;</span><br><span class="line"><span class="comment">//用户上线,将用户加入到OnlineMap中</span></span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Lock</span>()</span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span><span class="selector-attr">[u.Name]</span> = u</span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Unlock</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//广播当前用户上线信息</span></span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.BroadCast</span>(u, <span class="string">&quot;已上线&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用户的下线业务</span></span><br><span class="line">func (u *User) <span class="built_in">Offline</span>() &#123;</span><br><span class="line"><span class="comment">//用户下线,将用户从OnlineMap中删除</span></span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Lock</span>()</span><br><span class="line"><span class="built_in">delete</span>(u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span>, u.Name)</span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Unlock</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//广播当前用户上线信息</span></span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.BroadCast</span>(u, <span class="string">&quot;已下线&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户的消息业务</span></span><br><span class="line">func (u *User) <span class="built_in">DoMessage</span>(msg string) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="用户功能扩展"><a href="#用户功能扩展" class="headerlink" title="用户功能扩展"></a>用户功能扩展</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给当前User对应的客户端发送消息</span></span><br><span class="line"><span class="comment">// 通过指令处理用户请求</span></span><br><span class="line">func (u *User) <span class="constructor">SendMsg(<span class="params">msg</span> <span class="params">string</span>)</span> &#123;</span><br><span class="line">u.conn.<span class="constructor">Write([]<span class="params">byte</span>(<span class="params">msg</span>)</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在线用户查询功能。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> msg == <span class="string">&quot;who&quot;</span> &#123;</span><br><span class="line"><span class="comment">//查询当前在线用户</span></span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Lock</span>()</span><br><span class="line"><span class="keyword">for</span> _, user := range u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span> &#123;</span><br><span class="line">onlineMsg := <span class="string">&quot;[&quot;</span> + user<span class="selector-class">.Addr</span> + <span class="string">&quot;]&quot;</span> + user<span class="selector-class">.Name</span> + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;在线...\n&quot;</span></span><br><span class="line">u<span class="selector-class">.SendMsg</span>(onlineMsg)</span><br><span class="line">&#125;</span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Unlock</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改名功能</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(msg) &gt; <span class="number">7</span> &amp;&amp; msg<span class="selector-attr">[:7]</span> == <span class="string">&quot;rename|&quot;</span> &#123;</span><br><span class="line"><span class="comment">//消息格式：rename|XX</span></span><br><span class="line">newName := strings<span class="selector-class">.Split</span>(msg, <span class="string">&quot;|&quot;</span>)<span class="selector-attr">[1]</span></span><br><span class="line"><span class="comment">//判断name是否存在</span></span><br><span class="line">_, ok := u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span><span class="selector-attr">[newName]</span></span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">u<span class="selector-class">.SendMsg</span>(<span class="string">&quot;当前用户名被使用\n&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Lock</span>()</span><br><span class="line"><span class="built_in">delete</span>(u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span>, u.Name)</span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.OnlineMap</span><span class="selector-attr">[newName]</span> = u</span><br><span class="line">u<span class="selector-class">.server</span><span class="selector-class">.mapLock</span><span class="selector-class">.Unlock</span>()</span><br><span class="line"></span><br><span class="line">u<span class="selector-class">.Name</span> = newName</span><br><span class="line">u<span class="selector-class">.SendMsg</span>(<span class="string">&quot;您已更新用户名&quot;</span> + u<span class="selector-class">.Name</span> + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>超时离线功能<br>在服务器的阻塞执行进程中判断用户是否在线</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听用户是否活跃的channel</span></span><br><span class="line">isLive := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-isLive:</span><br><span class="line"><span class="comment">//当前用户是活跃的,应该重置定时器</span></span><br><span class="line"><span class="comment">//不做任何事情,激活select,更新下边定时器</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After((time.Second * <span class="number">120</span>)):</span><br><span class="line"><span class="comment">//已经超时</span></span><br><span class="line"><span class="comment">//将当前Use强制关闭</span></span><br><span class="line">user.SendMsg(<span class="string">&quot;登录已超时&quot;</span>)</span><br><span class="line"><span class="comment">//注销资源</span></span><br><span class="line"><span class="built_in">close</span>(user.C)</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">conn.Close()</span><br></pre></td></tr></table></figure><p>私聊功能<br>获取对方的用户对象信息并发送信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(msg) &gt; <span class="number">4</span> &amp;&amp; msg[:<span class="number">3</span>] == <span class="string">&quot;to|&quot;</span> &#123;</span><br><span class="line"><span class="comment">//消息格式 to|XX|msg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1 获取对方用户名</span></span><br><span class="line">remoteName := strings.Split(msg, <span class="string">&quot;|&quot;</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> remoteName == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">u.SendMsg(<span class="string">&quot;usage : to|XX|msg \n&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 根据用户名得到User对象</span></span><br><span class="line">remoteUser, ok := u.server.OnlineMap[remoteName]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">u.SendMsg(<span class="string">&quot;该用户名不存在\n&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 获取消息内容,通过对方的User对象将消息内容发送给过去</span></span><br><span class="line">content := strings.Split(msg, <span class="string">&quot;|&quot;</span>)[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> content == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">u.SendMsg(<span class="string">&quot;无内容，请重发\n&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">remoteUser.SendMsg(u.Name + <span class="string">&quot;对你说：&quot;</span> + content + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h2><p>处理用户输入,与服务端交互。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">ServerIp   <span class="type">string</span></span><br><span class="line">ServerPort <span class="type">int</span></span><br><span class="line">Name       <span class="type">string</span></span><br><span class="line">conn       net.Conn</span><br><span class="line">flag       <span class="type">int</span> <span class="comment">//当前客户端模式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.StringVar(&amp;serverIp, <span class="string">&quot;ip&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;服务器IP地址(默认为127.0.0.1)&quot;</span>)</span><br><span class="line">flag.IntVar(&amp;serverPort, <span class="string">&quot;port&quot;</span>, <span class="number">8888</span>, <span class="string">&quot;服务器端口(默认为8888)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//命令行解析</span></span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">client := NewClient(serverIp, serverPort)</span><br><span class="line"><span class="keyword">if</span> client == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;连接服务器失败...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单独开启一个goroutine处理server的回执消息</span></span><br><span class="line"><span class="keyword">go</span> client.DealResponse()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;连接服务器成功...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动客户端的业务</span></span><br><span class="line">client.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简易的即时通讯系统的模拟demo&quot;&gt;&lt;a href=&quot;#简易的即时通讯系统的模拟demo&quot; class=&quot;headerlink&quot; title=&quot;简易的即时通讯系统的模拟demo&quot;&gt;&lt;/a&gt;简易的即时通讯系统的模拟demo&lt;/h1&gt;&lt;p&gt;基本项目结构如下&lt;br&gt;&lt;img src=&quot;/2023/01/01/golang%E5%AD%A6%E4%B9%A0-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9Fdemo/tree.png&quot;&gt;&lt;br&gt;项目地址： &lt;a href=&quot;https://github.com/Vector-DY/Instant-Messaging-demo&quot;&gt;https://github.com/Vector-DY/Instant-Messaging-demo&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="golang" scheme="http://dyang.com.cn/categories/golang/"/>
    
    
    <category term="golang" scheme="http://dyang.com.cn/tags/golang/"/>
    
    <category term="instant-messaging" scheme="http://dyang.com.cn/tags/instant-messaging/"/>
    
  </entry>
  
  <entry>
    <title>happynewyear</title>
    <link href="http://dyang.com.cn/2022/12/31/happynewyear/"/>
    <id>http://dyang.com.cn/2022/12/31/happynewyear/</id>
    <published>2022-12-31T14:30:56.000Z</published>
    <updated>2022-12-31T16:00:04.487Z</updated>
    
    <content type="html"><![CDATA[<p>苏轼有句话：“犯其至难而图其至远”，意思是说“向最难之处攻坚，追求最远大的目标”。路虽远，行则将至；事虽难，做则必成。只要有愚公移山的志气、滴水穿石的毅力，脚踏实地，埋头苦干，积跬步以至千里，就一定能够把宏伟目标变为美好现实。<br>新年的钟声即将敲响，让我们怀着对未来的美好向往，共同迎接2023年的第一缕阳光。<br>祝愿祖国繁荣昌盛、国泰民安！祝愿世界和平美好、幸福安宁！祝愿大家新年快乐、皆得所愿！ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;苏轼有句话：“犯其至难而图其至远”，意思是说“向最难之处攻坚，追求最远大的目标”。路虽远，行则将至；事虽难，做则必成。只要有愚公移山的志气、滴水穿石的毅力，脚踏实地，埋头苦干，积跬步以至千里，就一定能够把宏伟目标变为美好现实。&lt;br&gt;新年的钟声即将敲响，让我们怀着对未来的美</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>newpapaername</title>
    <link href="http://dyang.com.cn/2022/12/31/newpapaername/"/>
    <id>http://dyang.com.cn/2022/12/31/newpapaername/</id>
    <published>2022-12-31T07:16:28.000Z</published>
    <updated>2022-12-31T16:00:02.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="test-hexo"><a href="#test-hexo" class="headerlink" title="test hexo"></a>test hexo</h1><pre><code>fum main()&#123;    print(&quot;hello hexo&quot;)&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;test-hexo&quot;&gt;&lt;a href=&quot;#test-hexo&quot; class=&quot;headerlink&quot; title=&quot;test hexo&quot;&gt;&lt;/a&gt;test hexo&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;fum main()&amp;#123;
    print(&amp;quot;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://dyang.com.cn/2022/12/31/hello-world/"/>
    <id>http://dyang.com.cn/2022/12/31/hello-world/</id>
    <published>2022-12-30T16:41:16.958Z</published>
    <updated>2022-12-31T15:59:56.382Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
